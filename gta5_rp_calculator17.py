# gta5_rp_calculator_enhanced.py
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import csv, os, json, threading, time, logging, traceback, sys, random, re, webbrowser
from queue import Queue
from datetime import datetime
from mobile_interface import MobileInterface
# from qr_generator import QRCodeGenerator

# –£–¥–∞–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ 5vito
import gc  # –î–ª—è —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    import keyboard
    HAS_KEYBOARD = True
except ImportError:
    HAS_KEYBOARD = False
    
try:
    import pyautogui
    HAS_PYAUTOGUI = True
except ImportError:
    HAS_PYAUTOGUI = False

try:
    import pytesseract
    from PIL import Image, ImageGrab, ImageEnhance, ImageTk
    HAS_TESSERACT = True
except ImportError:
    HAS_TESSERACT = False

try:
    import qrcode
    HAS_QRCODE = True
except ImportError:
    HAS_QRCODE = False

try:
    import pygetwindow as gw
    HAS_GETWINDOW = True
except ImportError:
    HAS_GETWINDOW = False
    gw = None

# Telegram –±–æ—Ç —É–¥–∞–ª–µ–Ω
TELEGRAM_BOT_AVAILABLE = False

# –§–∞–π–ª—ã
ITEMS_FILE = "items.csv"
DEAL_FILE = "deal_history.csv"
SETTINGS_FILE = "settings.json"
ERROR_LOG = "error.log"

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logger = logging.getLogger("TraderApp")
logger.setLevel(logging.DEBUG)
fmt = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(fmt)
fh = logging.FileHandler(ERROR_LOG, encoding="utf-8")
fh.setFormatter(fmt)
logger.addHandler(ch)
logger.addHandler(fh)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –ø–∏—à–µ–º –≤ error.log –∏ –≤ –∫–æ–Ω—Å–æ–ª—å
def excepthook(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    logger.error("Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback))
    # –¢–∞–∫–∂–µ –ø–µ—á–∞—Ç–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å (–Ω–∞ —Å–ª—É—á–∞–π –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
    traceback.print_exception(exc_type, exc_value, exc_traceback)

sys.excepthook = excepthook

# –ü—É—Ç—å –∫ tesseract (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è)
def setup_tesseract_path():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ Tesseract"""
    possible_paths = [
        r"C:\Program Files\Tesseract-OCR\tesseract.exe",
        r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
        r"C:\Users\{}\AppData\Local\Tesseract-OCR\tesseract.exe".format(os.getenv('USERNAME', '')),
        r"C:\tesseract\tesseract.exe"
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            pytesseract.pytesseract.tesseract_cmd = path
            logger.info(f"Tesseract –Ω–∞–π–¥–µ–Ω: {path}")
            return True
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
    try:
        import subprocess
        result = subprocess.run(['where', 'tesseract'], capture_output=True, text=True, shell=True)
        if result.returncode == 0 and result.stdout.strip():
            tesseract_path = result.stdout.strip().split('\n')[0]
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            logger.info(f"Tesseract –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫: {tesseract_path}")
            return True
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Tesseract: {e}")
    
    logger.warning("Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
    return False

# –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Tesseract
if HAS_TESSERACT:
    setup_tesseract_path()


# ================= –£–õ–£–ß–®–ï–ù–ù–´–ô –û–í–ï–†–õ–ï–ô =================
class OverlayWindow:
    def __init__(self, app, alpha=0.8, geometry="300x500+100+100"):
        self.app = app
        self.alpha = alpha
        self.root = tk.Toplevel()
        self.root.overrideredirect(True)
        self.root.attributes("-topmost", True)
        self.root.resizable(True, True)
        try:
            self.root.attributes("-alpha", self.alpha)
        except Exception:
            pass
        self.root.configure(bg="#1e1e1e")
        self.root.geometry(geometry)
        self.visible = True

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.title_bar = tk.Frame(self.root, bg="#333333", height=28)
        self.title_bar.pack(fill=tk.X)
        self.title_bar.pack_propagate(False)
        
        tk.Label(self.title_bar, text="–û–≤–µ—Ä–ª–µ–π GTA5", bg="#333333", fg="#fff", 
                font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=8)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        self.alpha_btn = tk.Button(self.title_bar, text="Œ±", bg="#555555", fg="#fff", 
                                 command=self.toggle_alpha, width=3, font=("Arial", 9))
        self.alpha_btn.pack(side=tk.RIGHT, padx=2)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        self.alpha_btn.bind("<KeyPress>", self._on_button_key_press)
        self.alpha_btn.bind("<FocusIn>", self._on_button_focus_in)
        self.alpha_btn.bind("<FocusOut>", self._on_button_focus_out)

        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.auto_scan_btn = tk.Button(self.title_bar, text="‚è∏", bg="#aa0000", fg="#fff",
                                      command=self.toggle_auto_scan, width=3, font=("Arial", 9))
        self.auto_scan_btn.pack(side=tk.RIGHT, padx=2)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.auto_scan_btn.bind("<KeyPress>", self._on_button_key_press)
        self.auto_scan_btn.bind("<FocusIn>", self._on_button_focus_in)
        self.auto_scan_btn.bind("<FocusOut>", self._on_button_focus_out)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_btn = tk.Button(self.title_bar, text="üîç", bg="#555555", fg="#fff",
                                 command=self.scan_and_update, width=3, font=("Arial", 9))
        self.scan_btn.pack(side=tk.RIGHT, padx=2)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_btn.bind("<KeyPress>", self._on_button_key_press)
        self.scan_btn.bind("<FocusIn>", self._on_button_focus_in)
        self.scan_btn.bind("<FocusOut>", self._on_button_focus_out)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_btn = tk.Button(self.title_bar, text="√ó", bg="#333333", fg="#fff", 
                                 bd=0, command=self.hide, font=("Arial", 12, "bold"), width=3)
        self.close_btn.pack(side=tk.RIGHT, padx=2)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_btn.bind("<KeyPress>", self._on_button_key_press)
        self.close_btn.bind("<FocusIn>", self._on_button_focus_in)
        self.close_btn.bind("<FocusOut>", self._on_button_focus_out)

        self.title_bar.bind("<ButtonPress-1>", self.start_move)
        self.title_bar.bind("<B1-Motion>", self.do_move)

        # –°—Ç–∏–ª—å Treeview
        style = ttk.Style()
        try:
            style.theme_use("clam")
        except Exception:
            pass
        style.configure("Overlay.Treeview",
                        background="#2e2e2e", fieldbackground="#2e2e2e", foreground="#ffffff", rowheight=22)
        style.map("Overlay.Treeview", background=[("selected", "#555555")], foreground=[("selected", "#ffffff")])
        
        # –°—Ç–∏–ª—å –¥–ª—è –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥–∏
        style.configure("Treeview", background="#2e2e2e", fieldbackground="#2e2e2e", foreground="#ffffff")
        style.map("Treeview", background=[("selected", "#555555")], foreground=[("selected", "#ffffff")])
        

        # === –ü–û–ò–°–ö –¢–û–í–ê–†–û–í ===
        self.search_frame = tk.Frame(self.root, bg="#1e1e1e")
        self.search_frame.pack(fill=tk.X, padx=8, pady=5)
        
        tk.Label(self.search_frame, text="–ü–æ–∏—Å–∫:", bg="#1e1e1e", fg="#fff").pack(side=tk.LEFT)
        self.search_var = tk.StringVar()
        self.search_entry = tk.Entry(self.search_frame, textvariable=self.search_var, width=20, bg="#333333", fg="#fff")
        self.search_entry.pack(side=tk.LEFT, padx=5)
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: trace_variable -> trace_add
        self.search_var.trace_add("write", lambda *args: self.filter_items())
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
        self.search_entry.bind("<KeyPress>", self._on_search_key_press)
        self.search_entry.bind("<FocusIn>", self._on_input_focus_in)
        self.search_entry.bind("<FocusOut>", self._on_input_focus_out)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
        self.clear_search_btn = tk.Button(self.search_frame, text="√ó", bg="#555555", fg="#fff",
                                        command=self.clear_search, width=3)
        self.clear_search_btn.pack(side=tk.LEFT, padx=2)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
        self.clear_search_btn.bind("<KeyPress>", self._on_button_key_press)
        self.clear_search_btn.bind("<FocusIn>", self._on_button_focus_in)
        self.clear_search_btn.bind("<FocusOut>", self._on_button_focus_out)

        # === –§–û–†–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø ===
        self.add_frame = tk.Frame(self.root, bg="#1e1e1e")
        self.add_frame.pack(fill=tk.X, padx=8, pady=5)
        
        tk.Label(self.add_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:", bg="#1e1e1e", fg="#fff").grid(row=0, column=0, sticky="w")
        
        # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π
        self.name_combo = ttk.Combobox(self.add_frame, width=18)
        self.name_combo.grid(row=0, column=1, padx=2)
        self.name_combo.bind("<Return>", lambda e: self.price_entry.focus())
        self.name_combo.bind("<KeyPress>", self._on_input_key_press)
        self.name_combo.bind("<FocusIn>", self._on_input_focus_in)
        self.name_combo.bind("<FocusOut>", self._on_input_focus_out)
        
        tk.Label(self.add_frame, text="–¶–µ–Ω–∞:", bg="#1e1e1e", fg="#fff").grid(row=0, column=2, sticky="w")
        self.price_var = tk.StringVar()
        self.price_entry = tk.Entry(self.add_frame, textvariable=self.price_var, width=10, bg="#333333", fg="#fff")
        self.price_entry.grid(row=0, column=3, padx=2)
        self.price_entry.bind("<Return>", lambda e: self.add_item_from_overlay())
        self.price_entry.bind("<KeyPress>", self._on_input_key_press)
        self.price_entry.bind("<FocusIn>", self._on_input_focus_in)
        self.price_entry.bind("<FocusOut>", self._on_input_focus_out)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        self.update_timer = None
        self.price_var.trace_add('write', lambda *args: self.schedule_profit_update())

        # === TREEVIEW ===
        self.tree_frame = tk.Frame(self.root, bg="#1e1e1e")
        self.tree_frame.pack(fill=tk.BOTH, expand=True, padx=8, pady=5)
        
        self.tree = ttk.Treeview(self.tree_frame, columns=("–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"), 
                               show="headings", style="Overlay.Treeview", height=8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.heading("–ù–∞–∑–≤–∞–Ω–∏–µ", text="–ù–∞–∑–≤–∞–Ω–∏–µ", command=lambda: self.sort_treeview("–ù–∞–∑–≤–∞–Ω–∏–µ", False))
        self.tree.heading("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", text="–¶–µ–Ω–∞", command=lambda: self.sort_treeview("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", False))
        self.tree.heading("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", command=lambda: self.sort_treeview("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", False))
        self.tree.column("–ù–∞–∑–≤–∞–Ω–∏–µ", width=120, anchor=tk.W)
        self.tree.column("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", width=60, anchor=tk.CENTER)
        self.tree.column("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", width=80, anchor=tk.W)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(self.tree_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π –¥–ª—è Treeview
        style = ttk.Style()
        style.configure("Overlay.Treeview", background="#2d2d2d", foreground="#ffffff")
        style.map("Overlay.Treeview", 
                 background=[('selected', '#404040'), ('active', '#2d2d2d')],
                 foreground=[('selected', '#ffffff'), ('active', '#ffffff')])
        
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # === –ö–ù–û–ü–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø ===
        self.add_button_frame = tk.Frame(self.root, bg="#1e1e1e")
        self.add_button_frame.pack(fill=tk.X, padx=8, pady=5)
        
        self.add_btn = tk.Button(
            self.add_button_frame, 
            text="–î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–†", 
            bg="#444444", 
            fg="#00ff00",
            command=self.add_item_from_overlay,
            font=("Arial", 10, "bold"),
            width=25,
            height=1,
            relief="raised",
            bd=2
        )
        self.add_btn.pack(pady=3)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_btn.bind("<KeyPress>", self._on_button_key_press)
        self.add_btn.bind("<FocusIn>", self._on_button_focus_in)
        self.add_btn.bind("<FocusOut>", self._on_button_focus_out)

        # === –ö–ù–û–ü–ö–ê –ê–í–¢–û–≠–ù–¢–ï–†–ê ===
        self.auto_enter_frame = tk.Frame(self.root, bg="#1e1e1e")
        self.auto_enter_frame.pack(fill=tk.X, padx=8, pady=3)
        
        self.auto_enter_btn = tk.Button(
            self.auto_enter_frame, 
            text="AUTO-ENTER: –í–´–ö–õ", 
            bg="#aa0000", 
            fg="#ffffff",
            command=self.toggle_auto_enter_from_overlay,
            font=("Arial", 8, "bold"),
            width=20,
            height=1,
            relief="raised",
            bd=1
        )
        self.auto_enter_btn.pack(pady=1)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—ç–Ω—Ç–µ—Ä–∞
        self.auto_enter_btn.bind("<KeyPress>", self._on_button_key_press)
        self.auto_enter_btn.bind("<FocusIn>", self._on_button_focus_in)
        self.auto_enter_btn.bind("<FocusOut>", self._on_button_focus_out)

        # === –°–¢–ê–¢–£–° –ë–ê–† ===
        self.status_bar = tk.Label(self.root, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", bg="#333333", fg="#00ff00", 
                                  anchor=tk.W, font=("Arial", 9))
        self.status_bar.pack(fill=tk.X, side=tk.BOTTOM)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—ç–Ω—Ç–µ—Ä–∞
        self.auto_enter_status = False

        # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
        self.tree.bind("<Double-1>", self.edit_item_from_overlay)
        self.tree.bind("<Button-3>", self.show_context_menu)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Treeview
        self.tree.bind("<KeyPress>", self._on_tree_key_press)
        self.tree.bind("<FocusIn>", self._on_tree_focus_in)
        self.tree.bind("<FocusOut>", self._on_tree_focus_out)
        self.tree.bind("<Button-1>", self._on_tree_click)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self.root, tearoff=0, bg="#333333", fg="#fff")
        self.context_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_selected)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self.delete_selected)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", command=self.copy_name)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É", command=self.copy_price)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.root.bind("<Configure>", self.on_resize)
        
        # === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô ===
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        self._setup_button_events()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—Å–µ–≥–æ –æ–∫–Ω–∞
        self.root.bind("<KeyPress>", self._handle_key_press)
        self.root.bind("<FocusIn>", self._on_focus_in)
        self.root.bind("<FocusOut>", self._on_focus_out)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self._setup_mouse_events()

    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ===
    def add_item_from_overlay(self):
        try:
            name = self.name_combo.get().strip()
            price = self.price_var.get().strip()
            
            if not name:
                self.show_notification("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!", "#ff6666")
                self.name_combo.config(background="#ff6666")
                self.root.after(300, lambda: self.name_combo.config(background="white"))
                return
                
            if not price:
                price = "0"
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app.name_var.set(name)
            self.app.avg_price_var.set(price)
            self.app.add_or_update()
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            self.name_combo.set("")
            self.price_var.set("")
            
            # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            self.name_combo.focus()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            self.update_list_from_app()
            self.update_autocomplete()
            
            self.show_notification(f"–¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!", "#00ff00")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")

    def edit_item_from_overlay(self, event):
        try:
            selection = self.tree.selection()
            if selection:
                item = self.tree.item(selection[0])
                values = item['values']
                if values:
                    self.name_combo.set(values[0])
                    self.price_var.set(values[1] if len(values) > 1 else "")
                    self.price_entry.focus()
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
                    self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")

    def update_list_from_app(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            items = []
            for child in self.app.tree.get_children():
                vals = self.app.tree.item(child)["values"]
                if len(vals) >= 7:  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –ø–æ–ª—è –≤–∫–ª—é—á–∞—è —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
                    items.append((vals[0], vals[6]))  # vals[6] - —ç—Ç–æ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            self.update_list(items)
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

    def scan_and_update(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
        try:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–µ –æ—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            # –ö—ç—à –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ TTL
            
            scanned_items = self.app.scan_items_with_prices()
            self.update_list_with_scanned_data(scanned_items)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def update_list(self, items, update_indicators=True):
        try:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
            current_items = [(self.tree.item(child)["values"][0], self.tree.item(child)["values"][1]) 
                           for child in self.tree.get_children()]
            new_items = [(name, str(avg)) for name, avg in items]
            
            # –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
            if current_items == new_items:
                return
                
            self.tree.delete(*self.tree.get_children())
            for name, avg in items:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                comment = self._get_item_comment(name)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
                formatted_price = self._format_number(avg)
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –±–µ–∑ —Ç–µ–≥–∞ (—Ü–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ)
                self.tree.insert("", tk.END, values=(name, formatted_price, comment))
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
            count = len(items)
            self.status_bar.config(text=f"–¢–æ–≤–∞—Ä–æ–≤: {count} | –ì–æ—Ç–æ–≤")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if update_indicators:
                self.update_profit_indicators()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–≤–µ—Ä–ª–µ—è: {e}")

    def update_list_with_scanned_data(self, scanned_items):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            current_items = [(self.tree.item(child)["values"][0], self.tree.item(child)["values"][1]) 
                           for child in self.tree.get_children()]
            new_items = [(item_name, str(found_price)) for item_name, found_price, avg_price in scanned_items]
            
            # –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
            if current_items == new_items:
                return
                
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            self.tree.delete(*self.tree.get_children())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            for item_name, found_price, avg_price in scanned_items:
                # –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ
                comment = self._get_item_comment(item_name)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
                formatted_price = self._format_number(found_price)
                self.tree.insert("", tk.END, values=(item_name, formatted_price, comment))
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
            total_count = len(scanned_items)
            self.status_bar.config(text=f"–¢–æ–≤–∞—Ä–æ–≤: {total_count} | –ì–æ—Ç–æ–≤")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")

    def _get_item_comment(self, item_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã"""
        try:
            for child in self.app.tree.get_children():
                vals = self.app.tree.item(child)["values"]
                if len(vals) >= 8 and vals[0] == item_name:
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–ª–æ–Ω–∫–µ 1 (–∏–Ω–¥–µ–∫—Å 1)
                    if len(vals) > 1 and vals[1] and str(vals[1]).strip():
                        comment = str(vals[1]).strip()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ (–Ω–µ "0.00", "0", –∏ —Ç.–¥.)
                        try:
                            float(comment)
                            # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, —Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            return "‚Äî"
                        except ValueError:
                            # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            return comment
            return "‚Äî"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏—Ä–µ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            return "‚Äî"
    
    def _format_number(self, number):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ (1–∫, 1.5–∫, 1–∫–∫)"""
        try:
            if isinstance(number, str):
                number = float(number)
            
            if number >= 1000000:  # 1 –º–∏–ª–ª–∏–æ–Ω –∏ –±–æ–ª—å—à–µ
                return f"{number/1000000:.1f}–∫–∫".replace('.0', '')
            elif number >= 1000:  # 1 —Ç—ã—Å—è—á–∞ –∏ –±–æ–ª—å—à–µ
                return f"{number/1000:.1f}–∫".replace('.0', '')
            else:
                return str(int(number))
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞: {e}")
            return str(number)

    def schedule_profit_update(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∞–≥–æ–≤"""
        try:
            if self.update_timer:
                self.root.after_cancel(self.update_timer)
            self.update_timer = self.root.after(500, self.update_profit_indicators)  # 500ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏: {e}")

    def update_profit_indicators(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–≤–µ—Ä–ª–µ–µ"""
        try:
            current_price = self.price_var.get().strip()
            if not current_price:
                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø—É—Å—Ç–∞—è, —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
                for child in self.tree.get_children():
                    self.tree.item(child, tags=())
                return
                
            current_price_f = float(current_price)
            profitable_count = 0
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            for child in self.tree.get_children():
                values = self.tree.item(child)["values"]
                if values and len(values) >= 2:
                    try:
                        avg_price_f = float(values[1])  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                        is_profitable = avg_price_f > 0 and current_price_f > 0 and current_price_f < avg_price_f
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–≥
                        current_tags = self.tree.item(child, "tags")
                        should_have_tag = is_profitable
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                        if should_have_tag and "profitable" not in current_tags:
                            self.tree.item(child, tags=("profitable",))
                            profitable_count += 1
                        elif not should_have_tag and "profitable" in current_tags:
                            self.tree.item(child, tags=())
                        elif should_have_tag:
                            profitable_count += 1
                            
                    except (ValueError, TypeError):
                        # –£–±–∏—Ä–∞–µ–º —Ç–µ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if "profitable" in self.tree.item(child, "tags"):
                            self.tree.item(child, tags=())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
            total_count = len(self.tree.get_children())
            if profitable_count > 0:
                self.status_bar.config(text=f"–¢–æ–≤–∞—Ä–æ–≤: {total_count} | –í—ã–≥–æ–¥–Ω—ã—Ö: {profitable_count}")
            else:
                self.status_bar.config(text=f"–¢–æ–≤–∞—Ä–æ–≤: {total_count} | –ì–æ—Ç–æ–≤")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
                
        except (ValueError, TypeError) as e:
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
            for child in self.tree.get_children():
                self.tree.item(child, tags=())
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏: {e}")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏: {e}")


    def toggle_auto_scan(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            self.app.auto_scan_enabled = not self.app.auto_scan_enabled
            
            if self.app.auto_scan_enabled:
                self.auto_scan_btn.config(text="‚ñ∂", bg="#00aa00")
                self.start_auto_scan()
                self.show_notification("–ê–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", "#00ff00")
            else:
                self.auto_scan_btn.config(text="‚è∏", bg="#aa0000")
                self.stop_auto_scan()
                self.show_notification("–ê–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", "#ff6666")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def start_auto_scan(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if self.app.auto_scan_timer:
                self.root.after_cancel(self.app.auto_scan_timer)
            
            def auto_scan_loop():
                if self.app.auto_scan_enabled and self.visible:
                    self.scan_and_update()
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    self.app.auto_scan_timer = self.root.after(self.app.auto_scan_interval, auto_scan_loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.app.auto_scan_timer = self.root.after(100, auto_scan_loop)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def stop_auto_scan(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if self.app.auto_scan_timer:
                self.root.after_cancel(self.app.auto_scan_timer)
                self.app.auto_scan_timer = None
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
    def update_autocomplete(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            names = [self.app.tree.item(c)["values"][0] for c in self.app.tree.get_children()]
            self.name_combo['values'] = names
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

    # === –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –ü–û–ò–°–ö ===
    def filter_items(self):
        try:
            search_text = self.search_var.get().lower()
            if not search_text:
                self.update_list_from_app()
                return
                
            filtered_items = []
            for child in self.app.tree.get_children():
                vals = self.app.tree.item(child)["values"]
                if len(vals) >= 7 and search_text in vals[0].lower():
                    filtered_items.append((vals[0], vals[6]))  # vals[6] - —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                    
            self.update_list(filtered_items)
            self.status_bar.config(text=f"–ù–∞–π–¥–µ–Ω–æ: {len(filtered_items)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")

    def clear_search(self):
        try:
            self.search_var.set("")
            self.update_list_from_app()
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞: {e}")

    # === –ö–û–ù–¢–ï–ö–°–¢–ù–û–ï –ú–ï–ù–Æ ===
    def show_context_menu(self, event):
        try:
            selection = self.tree.identify_row(event.y)
            if selection:
                self.tree.selection_set(selection)
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
                self.root.focus_set()
                try:
                    self.context_menu.tk_popup(event.x_root, event.y_root)
                finally:
                    self.context_menu.grab_release()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    def edit_selected(self):
        try:
            self.edit_item_from_overlay(None)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")

    def delete_selected(self):
        try:
            selection = self.tree.selection()
            if selection:
                item_name = self.tree.item(selection[0])["values"][0]
                
                # –ù–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                for child in self.app.tree.get_children():
                    vals = self.app.tree.item(child)["values"]
                    if vals[0] == item_name:
                        self.app.tree.delete(child)
                        self.app.save_items()
                        break
                
                self.update_list_from_app()
                self.update_autocomplete()
                self.show_notification(f"–¢–æ–≤–∞—Ä '{item_name}' —É–¥–∞–ª–µ–Ω!", "#ff6666")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
                self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")

    def copy_name(self):
        try:
            selection = self.tree.selection()
            if selection:
                name = self.tree.item(selection[0])["values"][0]
                self.root.clipboard_clear()
                self.root.clipboard_append(name)
                self.show_notification("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", "#00ff00")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
                self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")

    def copy_price(self):
        try:
            selection = self.tree.selection()
            if selection and len(self.tree.item(selection[0])["values"]) > 1:
                price = self.tree.item(selection[0])["values"][1]
                self.root.clipboard_clear()
                self.root.clipboard_append(str(price))
                self.show_notification("–¶–µ–Ω–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!", "#00ff00")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
                self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã: {e}")

    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    def toggle_alpha(self):
        try:
            self.alpha = 0.3 if self.alpha == 0.8 else 0.8
            self.set_alpha(self.alpha)
            status = "–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π" if self.alpha == 0.3 else "–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π"
            self.show_notification(f"–†–µ–∂–∏–º: {status}", "#00ff00")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏: {e}")

    def show_notification(self, message, color="#00ff00", duration=3000):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ"""
        try:
            self.status_bar.config(text=message, fg=color)
            self.root.after(duration, lambda: self.status_bar.config(text="–ì–æ—Ç–æ–≤", fg="#00ff00"))
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def update_auto_enter_status(self, enabled):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            self.auto_enter_status = enabled
            status_text = "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–ö–õ" if enabled else "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–´–ö–õ"
            color = "#00ff00" if enabled else "#ff6666"
            self.show_notification(status_text, color)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –æ–≤–µ—Ä–ª–µ–µ
            if hasattr(self, 'auto_enter_btn'):
                self.auto_enter_btn.config(
                    text=status_text,
                    bg="#00aa00" if enabled else "#aa0000",
                    fg="#ffffff"
                )
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def toggle_auto_enter_from_overlay(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –æ–≤–µ—Ä–ª–µ—è"""
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.app.toggle_page_refresh()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
            if hasattr(self.app, 'page_refresh_enabled'):
                enabled = self.app.page_refresh_enabled
                status_text = "AUTO-ENTER: –í–ö–õ" if enabled else "AUTO-ENTER: –í–´–ö–õ"
                bg_color = "#00aa00" if enabled else "#aa0000"
                
                self.auto_enter_btn.config(
                    text=status_text,
                    bg=bg_color,
                    fg="#ffffff"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                self.show_notification(status_text, "#00ff00" if enabled else "#ff6666")
                
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
                
        except Exception as e:
            self.show_notification("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "#ff0000")
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    def sort_treeview(self, col, reverse):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ Treeview"""
        try:
            items = [(self.tree.set(k, col), k) for k in self.tree.get_children('')]
            
            def try_float(x):
                try:
                    return float(str(x).replace(",", "."))
                except ValueError:
                    return str(x).lower()
                    
            items.sort(key=lambda t: try_float(t[0]), reverse=reverse)
            
            for index, (_, k) in enumerate(items):
                self.tree.move(k, '', index)
                
            self.tree.heading(col, command=lambda: self.sort_treeview(col, not reverse))
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ Treeview: {e}")

    def on_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        try:
            if event.widget == self.root:
                self.status_bar.config(text=f"–†–∞–∑–º–µ—Ä: {event.width}x{event.height}")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
                self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞: {e}")

    # === –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ ===
    def start_move(self, event):
        try:
            self.x = event.x
            self.y = event.y
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")

    def do_move(self, event):
        try:
            deltax = event.x - self.x
            deltay = event.y - self.y
            x = self.root.winfo_x() + deltax
            y = self.root.winfo_y() + deltay
            self.root.geometry(f"+{x}+{y}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")

    def hide(self):
        if self.visible:
            try:
                self.root.withdraw()
                # –û—á–∏—â–∞–µ–º —Ñ–æ–∫—É—Å —Å –∫–Ω–æ–ø–æ–∫
                self.root.focus_set()
            except Exception:
                pass
            self.visible = False
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –æ–≤–µ—Ä–ª–µ—è
            self.stop_auto_scan()

    def show(self):
        if not self.visible:
            try:
                self.root.deiconify()
                self.root.lift()
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
                self.root.focus_set()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                self._update_button_states()
            except Exception:
                pass
            self.visible = True
            self.update_list_from_app()
            self.update_autocomplete()
            self.name_combo.focus()

    def set_alpha(self, alpha):
        try:
            self.alpha = alpha
            self.root.attributes("-alpha", alpha)
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏: {e}")

    def get_geometry(self):
        try:
            return self.root.geometry()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –æ–∫–Ω–∞: {e}")
            return ""

    def _setup_button_events(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
        try:
            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –æ–≤–µ—Ä–ª–µ–µ
            buttons = [
                self.alpha_btn,
                self.auto_scan_btn,
                self.scan_btn,
                self.close_btn,
                self.clear_search_btn,
                self.add_btn,
                self.auto_enter_btn
            ]
            
            for button in buttons:
                if button:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
                    button.bind("<Button-1>", self._on_button_click)
                    button.bind("<ButtonRelease-1>", self._on_button_release)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    button.bind("<KeyPress>", self._on_button_key_press)
                    button.bind("<Return>", self._on_button_enter)
                    button.bind("<space>", self._on_button_space)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞
                    button.bind("<FocusIn>", self._on_button_focus_in)
                    button.bind("<FocusOut>", self._on_button_focus_out)
                    
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            input_widgets = [self.name_combo, self.price_entry, self.search_entry]
            for widget in input_widgets:
                if widget:
                    widget.bind("<KeyPress>", self._on_input_key_press)
                    widget.bind("<FocusIn>", self._on_input_focus_in)
                    widget.bind("<FocusOut>", self._on_input_focus_out)
                    
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Treeview
            if hasattr(self, 'tree'):
                self.tree.bind("<KeyPress>", self._on_tree_key_press)
                self.tree.bind("<FocusIn>", self._on_tree_focus_in)
                self.tree.bind("<FocusOut>", self._on_tree_focus_out)
                self.tree.bind("<Button-1>", self._on_tree_click)
                    
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–Ω–æ–ø–æ–∫: {e}")

    def _setup_mouse_events(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è –≤—Å–µ–≥–æ –æ–∫–Ω–∞"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –æ–∫–Ω—É
            self.root.bind("<Button-1>", self._on_window_click)
            self.root.bind("<ButtonRelease-1>", self._on_window_release)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            self.root.bind("<Motion>", self._on_mouse_motion)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏: {e}")

    def _on_button_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É
            event.widget.focus_set()
            # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–Ω–æ–ø–∫–∏
            if hasattr(event.widget, 'cget'):
                command = event.widget.cget('command')
                if command:
                    command()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∏: {e}")

    def _on_button_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            pass
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {e}")

    def _on_button_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–Ω–æ–ø–∫–∏
            if hasattr(event.widget, 'cget'):
                command = event.widget.cget('command')
                if command:
                    command()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏ –∫–Ω–æ–ø–∫–∏: {e}")

    def _on_button_enter(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –Ω–∞ –∫–Ω–æ–ø–∫–µ"""
        try:
            if hasattr(event.widget, 'cget'):
                command = event.widget.cget('command')
                if command:
                    command()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Enter –∫–Ω–æ–ø–∫–∏: {e}")

    def _on_button_space(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ"""
        try:
            if hasattr(event.widget, 'cget'):
                command = event.widget.cget('command')
                if command:
                    command()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–µ–ª–∞ –∫–Ω–æ–ø–∫–∏: {e}")

    def _on_button_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –∫–Ω–æ–ø–∫–æ–π"""
        try:
            # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞
            event.widget.config(relief="raised", bd=2)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–∫—É—Å–∞ –∫–Ω–æ–ø–∫–∏: {e}")

    def _on_button_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –∫–Ω–æ–ø–∫–æ–π"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
            event.widget.config(relief="raised", bd=1)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –∫–Ω–æ–ø–∫–∏: {e}")

    def _on_window_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ–∫–Ω—É"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
            self.root.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –æ–∫–Ω–∞: {e}")

    def _on_window_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ –≤ –æ–∫–Ω–µ"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            pass
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –≤ –æ–∫–Ω–µ: {e}")

    def _on_mouse_motion(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            pass
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏: {e}")

    def _handle_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –¥–ª—è –≤—Å–µ–≥–æ –æ–∫–Ω–∞"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
            if event.keysym == "Return":
                # –ï—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                if event.widget == self.name_combo or event.widget == self.price_entry:
                    self.add_item_from_overlay()
            elif event.keysym == "Escape":
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
                self.hide()
            elif event.keysym == "F1":
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                self.toggle_alpha()
            elif event.keysym == "F2":
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.toggle_auto_scan()
            elif event.keysym == "F3":
                # –°–∫–∞–Ω–∏—Ä—É–µ–º
                self.scan_and_update()
            elif event.keysym == "F4":
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.toggle_auto_enter_from_overlay()
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏: {e}")

    def _on_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–æ–º"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            self._update_button_states()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞: {e}")

    def _on_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–æ–º"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            pass
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞: {e}")

    def _update_button_states(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(self, 'auto_scan_btn'):
                if self.app.auto_scan_enabled:
                    self.auto_scan_btn.config(text="‚ñ∂", bg="#00aa00")
                else:
                    self.auto_scan_btn.config(text="‚è∏", bg="#aa0000")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if hasattr(self, 'auto_enter_btn'):
                if hasattr(self.app, 'page_refresh_enabled') and self.app.page_refresh_enabled:
                    self.auto_enter_btn.config(text="AUTO-ENTER: –í–ö–õ", bg="#00aa00")
                else:
                    self.auto_enter_btn.config(text="AUTO-ENTER: –í–´–ö–õ", bg="#aa0000")
                    
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")

    def _on_input_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
            if event.keysym == "Return":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                if event.widget == self.name_combo:
                    self.price_entry.focus()
                elif event.widget == self.price_entry:
                    self.add_item_from_overlay()
            elif event.keysym == "Escape":
                # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
                self.name_combo.set("")
                self.price_var.set("")
                self.name_combo.focus()
            elif event.keysym == "Tab":
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –º–µ–∂–¥—É –ø–æ–ª—è–º–∏
                if event.widget == self.name_combo:
                    self.price_entry.focus()
                elif event.widget == self.price_entry:
                    self.name_combo.focus()
                    
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞: {e}")

    def _on_input_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞"""
        try:
            # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø–æ–ª–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞
            if hasattr(event.widget, 'config'):
                event.widget.config(relief="solid", bd=2)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–∫—É—Å–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞: {e}")

    def _on_input_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
            if hasattr(event.widget, 'config'):
                event.widget.config(relief="flat", bd=1)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞: {e}")

    def _on_search_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
            if event.keysym == "Escape":
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
                self.search_var.set("")
                self.search_entry.focus()
            elif event.keysym == "Return":
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
                self.filter_items()
            elif event.keysym == "Tab":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—é –Ω–∞–∑–≤–∞–Ω–∏—è
                self.name_combo.focus()
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞: {e}")

    def _on_tree_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –≤ Treeview"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
            if event.keysym == "Return":
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                self.edit_item_from_overlay(None)
            elif event.keysym == "Delete":
                # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                self.delete_selected()
            elif event.keysym == "Escape":
                # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
                self.tree.selection_remove(self.tree.selection())
            elif event.keysym == "Tab":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—é –Ω–∞–∑–≤–∞–Ω–∏—è
                self.name_combo.focus()
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏ –≤ Treeview: {e}")

    def _on_tree_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ Treeview"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            pass
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–∫—É—Å–∞ Treeview: {e}")

    def _on_tree_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ Treeview"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            pass
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ Treeview: {e}")

    def _on_tree_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ Treeview"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ Treeview
            self.tree.focus_set()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ Treeview: {e}")

    def destroy(self):
        try:
            self.root.destroy()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –æ–∫–Ω–∞: {e}")


# ================= –û–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =================
class StatisticsWindow:
    def __init__(self, app):
        self.app = app
        self.window = None
        self.stats_vars = {
            "count": tk.StringVar(value="0"),
            "profit": tk.StringVar(value="0.00"),
            "income": tk.StringVar(value="0.00"),
            "expenses": tk.StringVar(value="0.00"),
            "net": tk.StringVar(value="0.00"),
            "avg_profit": tk.StringVar(value="0.00"),
            "avg_income": tk.StringVar(value="0.00"),
        }
        
    def create_window(self):
        if self.window and self.window.winfo_exists():
            self.window.deiconify()
            self.window.focus()
            return
            
        self.window = tk.Toplevel(self.app.root)
        self.window.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫")
        self.window.geometry("400x300")
        self.window.configure(bg="#1e1e1e")
        self.window.protocol("WM_DELETE_WINDOW", self.hide)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.window, bg="#1e1e1e")
        title_frame.pack(fill="x", pady=10)
        tk.Label(title_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫", font=("Arial", 14, "bold"), 
                bg="#1e1e1e", fg="#ffffff").pack()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = tk.Frame(self.window, bg="#1e1e1e")
        stats_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        labels = [
            ("–°–¥–µ–ª–æ–∫", "count"),
            ("–ü—Ä–∏–±—ã–ª—å", "profit"),
            ("–î–æ—Ö–æ–¥", "income"),
            ("–†–∞—Å—Ö–æ–¥—ã", "expenses"),
            ("–ò—Ç–æ–≥–æ", "net"),
            ("–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", "avg_profit"),
            ("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥", "avg_income"),
        ]
        
        for i, (lbl, key) in enumerate(labels):
            row_frame = tk.Frame(stats_frame, bg="#1e1e1e")
            row_frame.pack(fill="x", pady=2)
            
            tk.Label(row_frame, text=lbl + ":", bg="#1e1e1e", fg="#fff", 
                    width=20, anchor="w").pack(side="left")
            tk.Label(row_frame, textvariable=self.stats_vars[key], bg="#1e1e1e", 
                    fg="#00ffcc", width=15, anchor="w").pack(side="left")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        btn_frame = tk.Frame(self.window, bg="#1e1e1e")
        btn_frame.pack(fill="x", pady=10)
        tk.Button(btn_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=self.hide, 
                 bg="#333333", fg="#fff", width=15).pack()
    
    def show(self):
        self.create_window()
        self.update_stats()
    
    def hide(self):
        if self.window and self.window.winfo_exists():
            self.window.withdraw()
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if hasattr(self.app, 'stats_vars'):
            for key in self.stats_vars:
                if key in self.app.stats_vars:
                    self.stats_vars[key].set(self.app.stats_vars[key].get())


# ================= –†–µ–¥–∞–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ =================
class UIEditor(tk.Toplevel):
    def __init__(self, app):
        super().__init__(app.root)
        self.app = app
        self.title("–†–µ–¥–∞–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        self.configure(bg="#1e1e1e")
        self.resizable(False, False)

        tk.Label(self, text="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π:", bg="#1e1e1e", fg="#fff").pack(anchor="w", padx=10, pady=(10, 2))
        self.panel_vars = {}
        for key, label in [("items", "–¢–æ–≤–∞—Ä—ã"), ("history", "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"), ("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), ("overlay", "–û–≤–µ—Ä–ª–µ–π")]:
            var = tk.BooleanVar(value=self.app.ui_config.get("panels", {}).get(key, True))
            cb = tk.Checkbutton(self, text=label, variable=var, bg="#1e1e1e", fg="#fff", selectcolor="#444444", activebackground="#1e1e1e")
            cb.pack(anchor="w", padx=20, pady=2)
            self.panel_vars[key] = var

        tk.Label(self, text="–ü–æ–¥–ø–∏—Å–∏ –∫–Ω–æ–ø–æ–∫:", bg="#1e1e1e", fg="#fff").pack(anchor="w", padx=10, pady=(10, 2))
        self.button_entries = {}
        btnframe = tk.Frame(self, bg="#1e1e1e")
        btnframe.pack(fill="x", padx=10, pady=5)
        for key in ["add_item", "export_items", "clear_form", "delete_item", "add_deal", "toggle_overlay", "show_stats"]:
            lbl = tk.Label(btnframe, text=key, bg="#1e1e1e", fg="#fff")
            ent = tk.Entry(btnframe)
            ent.insert(0, self.app.ui_config.get("buttons", {}).get(key, self.app.default_button_texts.get(key, key)))
            lbl.pack(anchor="w")
            ent.pack(fill="x", pady=2)
            self.button_entries[key] = ent

        save_btn = tk.Button(self, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save, bg="#333333", fg="#fff")
        save_btn.pack(pady=10)

    def save(self):
        try:
            self.app.ui_config["panels"] = {k: v.get() for k, v in self.panel_vars.items()}
            self.app.ui_config["buttons"] = {k: e.get() for k, e in self.button_entries.items()}
            self.app.save_settings()
            self.app.apply_ui_config()
            self.destroy()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ UI-–∫–æ–Ω—Ñ–∏–≥–∞")


# ================= –û–≤–µ—Ä–ª–µ–π –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ =================
class SelectionOverlay:
    def __init__(self, master):
        self.master = master
        self.start_x = None
        self.start_y = None
        self.rect = None
        self.done = threading.Event()
        self.result_bbox = None  # (left, top, right, bottom)

        self.top = tk.Toplevel(master)
        self.top.attributes("-fullscreen", True)
        self.top.attributes("-topmost", True)
        self.top.attributes("-alpha", 0.25)
        self.top.configure(bg="#000000")
        self.top.configure(cursor="crosshair")
        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–≤–∞—Å –ü–ï–†–ï–î –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ü–≤–µ—Ç
        self.canvas = tk.Canvas(self.top, bg="#000000", highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True)
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ –∫–∞–Ω–≤–∞—Å—É
        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)
        self.top.bind("<Escape>", lambda e: self._cancel())

    def on_press(self, event):
        self.start_x, self.start_y = event.x, event.y
        if self.rect:
            self.canvas.delete(self.rect)
        self.rect = self.canvas.create_rectangle(self.start_x, self.start_y, event.x, event.y, outline="#00ff00", width=2)

    def on_drag(self, event):
        if self.rect:
            self.canvas.coords(self.rect, self.start_x, self.start_y, event.x, event.y)

    def on_release(self, event):
        x0, y0 = self.start_x, self.start_y
        x1, y1 = event.x, event.y
        left, right = sorted([x0, x1])
        top, bottom = sorted([y0, y1])
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–∫—Ä–∞–Ω–∞
        abs_left = left
        abs_top = top
        abs_right = right
        abs_bottom = bottom
        self.result_bbox = (abs_left, abs_top, abs_right, abs_bottom)
        try:
            self.top.destroy()
        finally:
            self.done.set()

    def get_bbox(self, timeout=None):
        self.done.wait(timeout=timeout)
        return self.result_bbox

    def _cancel(self):
        try:
            self.top.destroy()
        finally:
            self.result_bbox = None
            self.done.set()

# ================= –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ =================
# –ö–ª–∞—Å—Å AutoBuyer —É–¥–∞–ª–µ–Ω

# ================= –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ =================
class TraderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("GTA5 RP –ü–µ—Ä–µ–∫—É–ø-–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        self.root.geometry("1000x700")
        self.root.configure(bg="#1e1e1e")

        # –î–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.history = []
        self.running = True
        self.items_data = []

        # OCR/overlay –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.overlay_alpha = 0.8
        self.overlay_refresh = 0.2  # –£–≤–µ–ª–∏—á–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–≤–µ—Ä–ª–µ—è (0.2 —Å–µ–∫ –≤–º–µ—Å—Ç–æ 1.0)
        self.bbox = None
        self.overlays_enabled = True
        self.overlay_geometry = "350x650+100+100"

        # UI-config (–ø–∞–Ω–µ–ª–∏, –ø–æ–¥–ø–∏—Å–∏ –∫–Ω–æ–ø–æ–∫ –∏ –¥—Ä.)
        self.ui_config = {}
        self.default_button_texts = {
            "add_item": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä",
            "export_items": "–≠–∫—Å–ø–æ—Ä—Ç CSV —Ç–æ–≤–∞—Ä–æ–≤",
            "clear_form": "–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É",
            "delete_item": "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
            "add_deal": "–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É",
            "toggle_overlay": "–û–≤–µ—Ä–ª–µ–π –í–∫–ª",
            "show_stats": "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            "auto_buy": "–ê–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞"
        }

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ tkinter
        self.name_var = tk.StringVar()
        self.buy_var = tk.StringVar()
        self.sell_var = tk.StringVar()
        self.repair_var = tk.StringVar(value="0")
        self.tax_var = tk.StringVar(value="0")
        self.avg_price_var = tk.StringVar()
        self.total_profit_var = tk.StringVar(value="0.00")
        self.window_var = tk.StringVar()
        self.deal_price_var = tk.StringVar()
        self.deal_type_var = tk.StringVar(value="buy")
        self.main_search_var = tk.StringVar()  # –î–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ
        self.comment_var = tk.StringVar()  # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç–æ–≤–∞—Ä—É

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ vars
        self.stats_vars = {
            "count": tk.StringVar(value="0"),
            "profit": tk.StringVar(value="0.00"),
            "income": tk.StringVar(value="0.00"),
            "expenses": tk.StringVar(value="0.00"),
            "net": tk.StringVar(value="0.00"),
            "avg_profit": tk.StringVar(value="0.00"),
            "avg_income": tk.StringVar(value="0.00"),
        }

        # GUI —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∏/–≤–∏–¥–∏–º–æ—Å—Ç—å
        self.reg_buttons = {}   # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ {key: widget}
        self.panels_frames = {}  # —Å–ª–æ–≤–∞—Ä—å —Ñ—Ä–µ–π–º–æ–≤ –ø–∞–Ω–µ–ª–µ–π

        # OCR –æ—á–µ—Ä–µ–¥—å
        self.ocr_queue = Queue()
        self.ocr_thread = None
        self.ocr_enabled = True
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è
        self.auto_scan_enabled = False
        self.auto_scan_interval = 5000  # 5 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        self.auto_scan_timer = None
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        self.window_cache = None
        self.window_cache_time = 0
        self.window_cache_ttl = 5000  # 5 —Å–µ–∫—É–Ω–¥ –∫—ç—à –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_count = 0
        self.last_scan_time = 0
        self.adaptive_interval = 5000  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        self.item_names_cache = None
        self.item_names_cache_time = 0
        self.item_names_cache_ttl = 10000  # 10 —Å–µ–∫—É–Ω–¥ –∫—ç—à –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        self.ocr_settings = {
            'contrast_factor': 1.2,      # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
            'sharpness_factor': 1.0,     # –û—Ç–∫–ª—é—á–µ–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            'min_confidence': 25,        # –°–Ω–∏–∂–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR
            'min_price': 1,              # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            'max_price': 1000000,        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            'min_match_score': 60,       # –°–Ω–∏–∂–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            'image_scale_factor': 1.0    # –û—Ç–∫–ª—é—á–µ–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        }
        
        # –ü—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        try:
            self._re_price_in_text = re.compile(r"(\d[\d\s.,]{2,})")
            self._re_digits = re.compile(r"\d+")
            self._re_clean_text = re.compile(r"[^\w\s.,:()/-]")
            self._re_only_specials = re.compile(r"^[^\w]*$")
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ _is_valid_text
            garbage_patterns = [
                r'^[^\w]*$',
                r'^[–∞-—è—ë]{1,2}$',
                r'^[a-z]{1,2}$',
                r'^[0-9]+$',
                r'^[^\w\s]*$',
                r'^[–∞-—è—ë]*[—ã—ã]+[–∞-—è—ë]*$',
                r'^[–∞-—è—ë]*[–∞-—è—ë]{1,2}[–∞-—è—ë]*$',
                r'^[–∞-—è—ë]*[–∞-—è—ë]{1,3}$',
                r'^[–∞-—è—ë]*[–∞-—è—ë]{1,3}[–∞-—è—ë]*$',
                r'^[–∞-—è—ë]*[–∞-—è—ë]{1,3}[–∞-—è—ë]*[–∞-—è—ë]{1,3}[–∞-—è—ë]*$',
            ]
            suspicious_patterns = [
                r'^[–∞-—è—ë]{1,3}[–∞-—è—ë]{1,3}$',
                r'^[–∞-—è—ë]{1,2}[–∞-—è—ë]{1,2}[–∞-—è—ë]{1,2}$',
                r'^[–∞-—è—ë]*[–∞-—è—ë]{1,2}[–∞-—è—ë]*[–∞-—è—ë]{1,2}[–∞-—è—ë]*$',
            ]
            self._re_garbage_list = [re.compile(p, re.IGNORECASE) for p in garbage_patterns]
            self._re_suspicious_list = [re.compile(p, re.IGNORECASE) for p in suspicious_patterns]
        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å ‚Äî —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–µ –∏–º–µ—é—Ç –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å
            self._re_price_in_text = None
            self._re_digits = None
            self._re_clean_text = None
            self._re_only_specials = None
            self._re_garbage_list = []
            self._re_suspicious_list = []
        
        # –û–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_window = None
        
        # Telegram –±–æ—Ç —É–¥–∞–ª–µ–Ω

        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.page_refresh_enabled = False
        self.page_refresh_thread = None
        self.auto_enter_min_delay = 0.2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (—Å–µ–∫) - 5 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        self.auto_enter_max_delay = 0.33  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (—Å–µ–∫) - 3 —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É
        self.auto_enter_status_var = tk.StringVar(value="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í—ã–∫–ª")
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.search_field_x = 0.695  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X (0.0-1.0, –≥–¥–µ 0.5 = —Ü–µ–Ω—Ç—Ä)
        self.search_field_y = 0.142  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y (0.0-1.0, –≥–¥–µ 0.1 = 10% –æ—Ç –≤–µ—Ä—Ö–∞)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.search_field_clicked = False  # –§–ª–∞–≥ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.hotkeys_monitor_enabled = True
        self.hotkeys_last_check = time.time()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay
        self.payday_notifications_enabled = True
        self.last_payday_notification = None
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π —É–¥–∞–ª–µ–Ω–∞

        # –ú–æ–±–∏–ª—å–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.mobile_interface = None
        self.mobile_interface_thread = None
        self.mobile_interface_enabled = True  # –í–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–¥–∞–Ω–Ω—ã–µ
        self.load_settings()
        self.setup_gui()
        self.load_items()
        self.load_deals()
        self.update_total_profit()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–æ—Ç–æ–º —É–¥–∞–ª–µ–Ω–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Tesseract
        self.check_tesseract()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ Tesseract (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if HAS_TESSERACT:
            try:
                pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
                logger.info("–ü—É—Ç—å –∫ Tesseract —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –∫ Tesseract: {e}")
        else:
            logger.info("Tesseract OCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—É—Ç–∏")

        # –û–≤–µ—Ä–ª–µ–π - —Å–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ setup_gui
        self.overlay_window = OverlayWindow(self, alpha=self.overlay_alpha, geometry=self.overlay_geometry)
        if not self.overlays_enabled:
            self.overlay_window.hide()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–≤–µ—Ä–ª–µ–µ
        if hasattr(self, 'overlay_window'):
            self.overlay_window.update_auto_enter_status(self.page_refresh_enabled)

        # –ó–∞–ø—É—Å–∫–∞–µ–º OCR-–ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω
        if self.ocr_enabled:
            self.ocr_thread = threading.Thread(target=self.ocr_loop, daemon=True, name="OCRThread")
            self.ocr_thread.start()
            self.root.after(100, self.update_overlay_safe)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self._register_hotkeys()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self._start_hotkeys_monitor()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PayDay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._start_payday_monitor()

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—ç–Ω—Ç–µ—Ä
        self.root.bind("<Unmap>", self._on_window_minimize)
        self.root.bind("<Map>", self._on_window_restore)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º UI –∫–æ–Ω—Ñ–∏–≥ (–ø–æ–¥–ø–∏—Å–∏ –∫–Ω–æ–ø–æ–∫, –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞–Ω–µ–ª–µ–π)
        self.apply_ui_config()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è
        self.update_combobox_values()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω
        self.update_window_list()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.start_mobile_interface()
        
        # Telegram –±–æ—Ç —É–¥–∞–ª–µ–Ω

    def start_mobile_interface(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.mobile_interface = MobileInterface(self)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            mobile_thread = threading.Thread(target=self.mobile_interface.run, daemon=True)
            mobile_thread.start()
            
            logger.info("üì± –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n{str(e)}")

    # ---------------- GUI ----------------
    def setup_gui(self):
        top_frame = tk.Frame(self.root, bg="#1e1e1e")
        top_frame.grid(row=0, column=0, columnspan=8, sticky="ew", padx=5, pady=5)
        top_frame.grid_columnconfigure(1, weight=1)

        tk.Label(top_frame, text="–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: ", bg="#1e1e1e", fg="#ffffff",
                 font=("Arial", 12, "bold")).grid(row=0, column=0, sticky="w", padx=5)
        self.profit_label = tk.Label(top_frame, textvariable=self.total_profit_var, bg="#1e1e1e", fg="#00ff00",
                                     font=("Arial", 12, "bold"))
        self.profit_label.grid(row=0, column=1, sticky="w", padx=5)

        tk.Label(top_frame, text="–í—ã–±–æ—Ä –æ–∫–Ω–∞:", bg="#1e1e1e", fg="#ffffff").grid(row=0, column=2, sticky="e")
        self.window_cb = ttk.Combobox(top_frame, textvariable=self.window_var, width=30)
        self.window_cb.grid(row=0, column=3, sticky="w", padx=5)
        tk.Button(top_frame, text="–û–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–∞", command=self.update_window_list, bg="#333333", fg="#fff")\
            .grid(row=0, column=4, padx=5)

        self.toggle_overlay_btn = tk.Button(top_frame, text=self.default_button_texts["toggle_overlay"], command=self.toggle_overlay, bg="#333333", fg="#fff")
        self.toggle_overlay_btn.grid(row=0, column=5, padx=5)
        self.reg_buttons["toggle_overlay"] = self.toggle_overlay_btn
        
        self.show_stats_btn = tk.Button(top_frame, text=self.default_button_texts["show_stats"], command=self.show_stats, bg="#333333", fg="#fff")
        self.show_stats_btn.grid(row=0, column=6, padx=5)
        self.reg_buttons["show_stats"] = self.show_stats_btn

        self.settings_btn = tk.Button(top_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.open_settings, bg="#333333", fg="#fff")
        self.settings_btn.grid(row=0, column=7, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.reload_hotkeys_btn = tk.Button(top_frame, text="üîÑ Hotkeys", command=self.reload_hotkeys, 
                                          bg="#555555", fg="#fff", width=10)
        self.reload_hotkeys_btn.grid(row=0, column=8, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.test_auto_enter_btn = tk.Button(top_frame, text="üîÑ Auto Enter", command=self.toggle_page_refresh, 
                                           bg="#0066cc", fg="#fff", width=12)
        self.test_auto_enter_btn.grid(row=0, column=9, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.mobile_setup_btn = tk.Button(top_frame, text="üì± Mobile", command=self.setup_mobile_access, 
                                         bg="#0088cc", fg="#fff", width=10)
        self.mobile_setup_btn.grid(row=0, column=10, padx=5)

        
        # –ö–Ω–æ–ø–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∞

        # –ú–µ–Ω—é -> –†–µ–¥–∞–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        menu = tk.Menu(self.root)
        self.root.config(menu=menu)
        ui_menu = tk.Menu(menu, tearoff=0)
        ui_menu.add_command(label="–†–µ–¥–∞–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", command=lambda: UIEditor(self))
        menu.add_cascade(label="–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å", menu=ui_menu)

        # –§–æ—Ä–º–∞ —Ç–æ–≤–∞—Ä–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–∞–Ω–µ–ª—å items)
        items_frame = tk.LabelFrame(self.root, text="–¢–æ–≤–∞—Ä—ã", bg="#1e1e1e", fg="#fff")
        items_frame.grid(row=1, column=0, columnspan=8, sticky="nsew", padx=10, pady=6)
        self.panels_frames["items"] = items_frame

        tk.Label(items_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ", bg="#1e1e1e", fg="#fff").grid(row=0, column=0, padx=5, pady=5)
        self.name_cb = ttk.Combobox(items_frame, textvariable=self.name_var, width=20)
        self.name_cb.grid(row=0, column=1, padx=5, pady=5)
        self.name_cb.bind("<<ComboboxSelected>>", self.fill_form_from_selection)

        tk.Label(items_frame, text="–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏", bg="#1e1e1e", fg="#fff").grid(row=0, column=2, padx=5, pady=5)
        self.buy_entry = tk.Entry(items_frame, textvariable=self.buy_var, width=10)
        self.buy_entry.grid(row=0, column=3, padx=5, pady=5)
        tk.Label(items_frame, text="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", bg="#1e1e1e", fg="#fff").grid(row=0, column=4, padx=5, pady=5)
        self.sell_entry = tk.Entry(items_frame, textvariable=self.sell_var, width=10)
        self.sell_entry.grid(row=0, column=5, padx=5, pady=5)

        tk.Label(items_frame, text="–†–µ–º–æ–Ω—Ç/—Ç—é–Ω–∏–Ω–≥", bg="#1e1e1e", fg="#fff").grid(row=1, column=0, padx=5, pady=5)
        self.repair_entry = tk.Entry(items_frame, textvariable=self.repair_var, width=10)
        self.repair_entry.grid(row=1, column=1, padx=5, pady=5)
        tk.Label(items_frame, text="–ù–∞–ª–æ–≥/–ö–æ–º–∏—Å—Å–∏—è %", bg="#1e1e1e", fg="#fff").grid(row=1, column=2, padx=5, pady=5)
        self.tax_entry = tk.Entry(items_frame, textvariable=self.tax_var, width=10)
        self.tax_entry.grid(row=1, column=3, padx=5, pady=5)
        tk.Label(items_frame, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", bg="#1e1e1e", fg="#fff").grid(row=1, column=4, padx=5, pady=5)
        self.avg_entry = tk.Entry(items_frame, textvariable=self.avg_price_var, width=10)
        self.avg_entry.grid(row=1, column=5, padx=5, pady=5)

        tk.Label(items_frame, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", bg="#1e1e1e", fg="#fff").grid(row=1, column=6, padx=5, pady=5)
        self.comment_entry = tk.Entry(items_frame, textvariable=self.comment_var, width=15)
        self.comment_entry.grid(row=1, column=7, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
        btn_frame = tk.Frame(items_frame, bg="#1e1e1e")
        btn_frame.grid(row=2, column=0, columnspan=8, sticky="ew", pady=5)
        for i in range(8):
            btn_frame.grid_columnconfigure(i, weight=1)

        b1 = tk.Button(btn_frame, text=self.default_button_texts["add_item"], command=self.add_or_update, bg="#333333", fg="#fff")
        b1.grid(row=0, column=0, padx=5, sticky="ew")
        self.reg_buttons["add_item"] = b1

        b2 = tk.Button(btn_frame, text=self.default_button_texts["export_items"], command=self.export_items_csv, bg="#333333", fg="#fff")
        b2.grid(row=0, column=1, padx=5, sticky="ew")
        self.reg_buttons["export_items"] = b2

        b3 = tk.Button(btn_frame, text=self.default_button_texts["clear_form"], command=self.clear_form, bg="#333333", fg="#fff")
        b3.grid(row=0, column=2, padx=5, sticky="ew")
        self.reg_buttons["clear_form"] = b3

        b4 = tk.Button(btn_frame, text=self.default_button_texts["delete_item"], command=self.delete_selected_item, bg="#333333", fg="#fff")
        b4.grid(row=0, column=3, padx=5, sticky="ew")
        self.reg_buttons["delete_item"] = b4

        # –ö–Ω–æ–ø–∫–∞ Telegram –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω

        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        self.tree_frame = tk.Frame(items_frame, bg="#1e1e1e")
        self.tree_frame.grid(row=3, column=0, columnspan=8, sticky="nsew", padx=5, pady=5)

        self.tree = ttk.Treeview(self.tree_frame, columns=("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ü–æ–∫—É–ø–∫–∞", "–ü—Ä–æ–¥–∞–∂–∞", "–†–µ–º–æ–Ω—Ç", "–ù–∞–ª–æ–≥", "–°—Ä–µ–¥–Ω—è—è", "–ü—Ä–∏–±—ã–ª—å"), show="headings")
        self.tree.heading("–ù–∞–∑–≤–∞–Ω–∏–µ", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.tree.heading("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        self.tree.heading("–ü–æ–∫—É–ø–∫–∞", text="–ü–æ–∫—É–ø–∫–∞")
        self.tree.heading("–ü—Ä–æ–¥–∞–∂–∞", text="–ü—Ä–æ–¥–∞–∂–∞")
        self.tree.heading("–†–µ–º–æ–Ω—Ç", text="–†–µ–º–æ–Ω—Ç")
        self.tree.heading("–ù–∞–ª–æ–≥", text="–ù–∞–ª–æ–≥")
        self.tree.heading("–°—Ä–µ–¥–Ω—è—è", text="–°—Ä–µ–¥–Ω—è—è")
        self.tree.heading("–ü—Ä–∏–±—ã–ª—å", text="–ü—Ä–∏–±—ã–ª—å")
        self.tree.column("–ù–∞–∑–≤–∞–Ω–∏–µ", width=120)
        self.tree.column("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", width=100)
        self.tree.column("–ü–æ–∫—É–ø–∫–∞", width=70)
        self.tree.column("–ü—Ä–æ–¥–∞–∂–∞", width=70)
        self.tree.column("–†–µ–º–æ–Ω—Ç", width=70)
        self.tree.column("–ù–∞–ª–æ–≥", width=70)
        self.tree.column("–°—Ä–µ–¥–Ω—è—è", width=70)
        self.tree.column("–ü—Ä–∏–±—ã–ª—å", width=70)

        scrollbar = ttk.Scrollbar(self.tree_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.tree.bind("<Double-1>", self.fill_form_from_tree)
        self.tree.bind("<Button-3>", self.show_context_menu)

        # === –ü–û–ò–°–ö –¢–û–í–ê–†–û–í –í –û–°–ù–û–í–ù–û–ú –û–ö–ù–ï ===
        search_frame = tk.Frame(items_frame, bg="#1e1e1e")
        search_frame.grid(row=4, column=0, columnspan=8, sticky="ew", padx=5, pady=5)
        
        tk.Label(search_frame, text="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:", bg="#1e1e1e", fg="#fff").pack(side=tk.LEFT)
        self.main_search_entry = tk.Entry(search_frame, textvariable=self.main_search_var, width=30, bg="#333333", fg="#fff")
        self.main_search_entry.pack(side=tk.LEFT, padx=5)
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: trace_variable -> trace_add
        self.main_search_var.trace_add("write", lambda *args: self.filter_main_items())
        
        clear_btn = tk.Button(search_frame, text="√ó", bg="#555555", fg="#fff", command=self.clear_main_search, width=3)
        clear_btn.pack(side=tk.LEFT, padx=2)

        # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ (–ø–∞–Ω–µ–ª—å history)
        history_frame = tk.LabelFrame(self.root, text="–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", bg="#1e1e1e", fg="#fff")
        history_frame.grid(row=2, column=0, columnspan=8, sticky="nsew", padx=10, pady=6)
        self.panels_frames["history"] = history_frame

        tk.Label(history_frame, text="–¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏", bg="#1e1e1e", fg="#fff").grid(row=0, column=0, padx=5, pady=5)
        self.deal_price_entry = tk.Entry(history_frame, textvariable=self.deal_price_var, width=10)
        self.deal_price_entry.grid(row=0, column=1, padx=5, pady=5)
        tk.Label(history_frame, text="–¢–∏–ø", bg="#1e1e1e", fg="#fff").grid(row=0, column=2, padx=5, pady=5)
        self.deal_type_cb = ttk.Combobox(history_frame, textvariable=self.deal_type_var, values=["buy", "sell"], width=10)
        self.deal_type_cb.grid(row=0, column=3, padx=5, pady=5)

        self.add_deal_btn = tk.Button(history_frame, text=self.default_button_texts["add_deal"], command=self.add_deal, bg="#333333", fg="#fff")
        self.add_deal_btn.grid(row=0, column=4, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ –∏–∑ 5VITO
        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞
        self.reg_buttons["add_deal"] = self.add_deal_btn
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π —É–¥–∞–ª–µ–Ω–∞
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        self.clear_history_btn = tk.Button(history_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", 
                                         command=self.clear_all_history, bg="#aa0000", fg="#fff", width=15)
        self.clear_history_btn.grid(row=0, column=5, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ –º—É—Å–æ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã
        
        # –ö–Ω–æ–ø–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.mobile_interface_btn = tk.Button(history_frame, text="üì± –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", 
                                            command=self.toggle_mobile_interface, bg="#0066cc", fg="#fff", width=15)
        self.mobile_interface_btn.grid(row=0, column=6, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ QR-–∫–æ–¥–∞
        self.qr_code_btn = tk.Button(history_frame, text="üì± QR-–∫–æ–¥", 
                                    command=self.show_qr_code, bg="#cc6600", fg="#fff", width=15)
        self.qr_code_btn.grid(row=0, column=7, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.test_mobile_btn = tk.Button(history_frame, text="üß™ –¢–µ—Å—Ç Mobile", 
                                       command=self.test_mobile_interface, bg="#0066cc", fg="#fff", width=15)
        self.test_mobile_btn.grid(row=0, column=8, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.sync_btn = tk.Button(history_frame, text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", 
                                 command=self.sync_with_mobile_interface, bg="#aa6600", fg="#fff", width=15)
        self.sync_btn.grid(row=0, column=9, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        self.clean_phantom_btn = tk.Button(history_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–Ω—Ç–æ–º—ã", 
                                          command=self.clean_phantom_deals, bg="#cc0000", fg="#fff", width=15)
        self.clean_phantom_btn.grid(row=0, column=10, padx=5, pady=5)

        self.history_tree = ttk.Treeview(history_frame, columns=("–î–∞—Ç–∞", "–¢–∏–ø", "–¶–µ–Ω–∞", "–¢–æ–≤–∞—Ä"), show="headings")
        self.history_tree.heading("–î–∞—Ç–∞", text="–î–∞—Ç–∞")
        self.history_tree.heading("–¢–∏–ø", text="–¢–∏–ø")
        self.history_tree.heading("–¶–µ–Ω–∞", text="–¶–µ–Ω–∞")
        self.history_tree.heading("–¢–æ–≤–∞—Ä", text="–¢–æ–≤–∞—Ä")
        self.history_tree.column("–î–∞—Ç–∞", width=120)
        self.history_tree.column("–¢–∏–ø", width=80)
        self.history_tree.column("–¶–µ–Ω–∞", width=100)
        self.history_tree.column("–¢–æ–≤–∞—Ä", width=150)

        scrollbar2 = ttk.Scrollbar(history_frame, orient=tk.VERTICAL, command=self.history_tree.yview)
        self.history_tree.configure(yscrollcommand=scrollbar2.set)
        self.history_tree.grid(row=1, column=0, columnspan=11, sticky="nsew", padx=5, pady=5)
        scrollbar2.grid(row=1, column=11, sticky="ns")
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        self.history_tree.bind("<Button-3>", self.show_history_context_menu)
        
        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–∞–Ω–µ–ª—å stats)
        stats_frame = tk.LabelFrame(self.root, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", bg="#1e1e1e", fg="#fff")
        stats_frame.grid(row=3, column=0, columnspan=8, sticky="nsew", padx=10, pady=6)
        self.panels_frames["stats"] = stats_frame

        stats_labels = [
            ("–°–¥–µ–ª–æ–∫", "count"),
            ("–ü—Ä–∏–±—ã–ª—å", "profit"),
            ("–î–æ—Ö–æ–¥", "income"),
            ("–†–∞—Å—Ö–æ–¥—ã", "expenses"),
            ("–ò—Ç–æ–≥–æ", "net"),
            ("–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", "avg_profit"),
            ("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥", "avg_income"),
        ]

        for i, (lbl, key) in enumerate(stats_labels):
            tk.Label(stats_frame, text=lbl + ":", bg="#1e1e1e", fg="#fff").grid(row=i//4, column=(i%4)*2, sticky="e", padx=5, pady=2)
            tk.Label(stats_frame, textvariable=self.stats_vars[key], bg="#1e1e1e", fg="#00ffcc").grid(row=i//4, column=(i%4)*2+1, sticky="w", padx=5, pady=2)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –∫–æ–ª–æ–Ω–æ–∫
        self.root.grid_rowconfigure(1, weight=1)
        self.root.grid_rowconfigure(2, weight=1)
        self.root.grid_rowconfigure(3, weight=0)
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_columnconfigure(1, weight=1)
        self.root.grid_columnconfigure(2, weight=1)
        self.root.grid_columnconfigure(3, weight=1)
        self.root.grid_columnconfigure(4, weight=1)
        self.root.grid_columnconfigure(5, weight=1)
        self.root.grid_columnconfigure(6, weight=1)
        self.root.grid_columnconfigure(7, weight=1)
        self.root.grid_columnconfigure(8, weight=1)
        self.root.grid_columnconfigure(9, weight=1)
        self.root.grid_columnconfigure(10, weight=1)
        self.root.grid_columnconfigure(11, weight=0)

        items_frame.grid_rowconfigure(3, weight=1)
        items_frame.grid_columnconfigure(0, weight=1)
        items_frame.grid_columnconfigure(1, weight=1)
        items_frame.grid_columnconfigure(2, weight=1)
        items_frame.grid_columnconfigure(3, weight=1)
        items_frame.grid_columnconfigure(4, weight=1)
        items_frame.grid_columnconfigure(5, weight=1)
        items_frame.grid_columnconfigure(6, weight=1)
        items_frame.grid_columnconfigure(7, weight=1)

        history_frame.grid_rowconfigure(1, weight=1)
        history_frame.grid_columnconfigure(0, weight=1)
        history_frame.grid_columnconfigure(1, weight=1)
        history_frame.grid_columnconfigure(2, weight=1)
        history_frame.grid_columnconfigure(3, weight=1)
        history_frame.grid_columnconfigure(4, weight=1)
        history_frame.grid_columnconfigure(5, weight=1)
        history_frame.grid_columnconfigure(6, weight=1)
        history_frame.grid_columnconfigure(7, weight=1)
        history_frame.grid_columnconfigure(8, weight=1)
        history_frame.grid_columnconfigure(9, weight=1)
        history_frame.grid_columnconfigure(10, weight=1)

    # ---------------- –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –¢–û–í–ê–†–û–í –í –û–°–ù–û–í–ù–û–ú –û–ö–ù–ï ----------------
    def filter_main_items(self):
        search_text = self.main_search_var.get().lower()
        if not search_text:
            # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            for child in self.tree.get_children():
                self.tree.delete(child)
            for item in self.items_data:
                self.tree.insert("", tk.END, values=item)
            return
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        for child in self.tree.get_children():
            self.tree.delete(child)
            
        for item in self.items_data:
            if search_text in item[0].lower():
                self.tree.insert("", tk.END, values=item)

    def clear_main_search(self):
        self.main_search_var.set("")
        self.filter_main_items()

    # ---------------- –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ----------------
    def apply_ui_config(self):
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞–Ω–µ–ª–µ–π
        panels = self.ui_config.get("panels", {})
        for key, frame in self.panels_frames.items():
            visible = panels.get(key, True)
            if visible:
                frame.grid()
            else:
                frame.grid_remove()
                
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫–Ω–æ–ø–æ–∫
        buttons = self.ui_config.get("buttons", {})
        for key, btn in self.reg_buttons.items():
            text = buttons.get(key, self.default_button_texts.get(key, key))
            btn.config(text=text)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–≤–µ—Ä–ª–µ—è
        if hasattr(self, 'overlay_window') and self.overlay_window.visible:
            self.toggle_overlay_btn.config(text="–û–≤–µ—Ä–ª–µ–π –í—ã–∫–ª")
        else:
            self.toggle_overlay_btn.config(text="–û–≤–µ—Ä–ª–µ–π –í–∫–ª")

    def show_stats(self):
        if not self.stats_window:
            self.stats_window = StatisticsWindow(self)
        self.stats_window.show()

    def update_total_profit(self):
        total = 0.0
        for child in self.tree.get_children():
            values = self.tree.item(child)["values"]
            if len(values) >= 8:  # –¢–µ–ø–µ—Ä—å 8 –ø–æ–ª–µ–π –≤–º–µ—Å—Ç–æ 7
                try:
                    total += float(values[7])  # –ü—Ä–∏–±—ã–ª—å —Ç–µ–ø–µ—Ä—å –≤ 8-–º –ø–æ–ª–µ (–∏–Ω–¥–µ–∫—Å 7)
                except ValueError:
                    pass
        self.total_profit_var.set(f"{total:.2f}")

    def add_or_update(self):
        name = self.name_var.get().strip()
        if not name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!")
            return

        buy = self.buy_var.get() or "0"
        sell = self.sell_var.get() or "0"
        repair = self.repair_var.get() or "0"
        tax = self.tax_var.get() or "0"
        avg = self.avg_price_var.get() or "0"
        comment = self.comment_var.get().strip()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

        try:
            buy_f = float(buy)
            sell_f = float(sell)
            repair_f = float(repair)
            tax_f = float(tax)
            avg_f = float(avg)
            profit = sell_f - buy_f - repair_f - (sell_f * tax_f / 100)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
            return

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
        found = None
        for child in self.tree.get_children():
            values = self.tree.item(child)["values"]
            if values and values[0] == name:
                found = child
                break

        values = (name, comment, buy, sell, repair, tax, avg, f"{profit:.2f}")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if found:
            self.tree.item(found, values=values)
        else:
            self.tree.insert("", tk.END, values=values)

        self.save_items()
        self.update_total_profit()
        self.update_combobox_values()
        self.clear_form()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–æ—Ç–æ–º —É–¥–∞–ª–µ–Ω–∞

    def clear_form(self):
        self.name_var.set("")
        self.buy_var.set("")
        self.sell_var.set("")
        self.repair_var.set("0")
        self.tax_var.set("0")
        self.avg_price_var.set("")
        self.comment_var.set("")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        self.name_cb.focus()

    def fill_form_from_tree(self, event):
        selection = self.tree.selection()
        if selection:
            values = self.tree.item(selection[0])["values"]
            if values:
                self.name_var.set(values[0])
                self.comment_var.set(values[1] if len(values) > 1 else "")  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                self.buy_var.set(values[2] if len(values) > 2 else "")
                self.sell_var.set(values[3] if len(values) > 3 else "")
                self.repair_var.set(values[4] if len(values) > 4 else "")
                self.tax_var.set(values[5] if len(values) > 5 else "")
                self.avg_price_var.set(values[6] if len(values) > 6 else "")

    def fill_form_from_selection(self, event):
        name = self.name_var.get()
        for child in self.tree.get_children():
            values = self.tree.item(child)["values"]
            if values and values[0] == name:
                self.comment_var.set(values[1] if len(values) > 1 else "")  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                self.buy_var.set(values[2] if len(values) > 2 else "")
                self.sell_var.set(values[3] if len(values) > 3 else "")
                self.repair_var.set(values[4] if len(values) > 4 else "")
                self.tax_var.set(values[5] if len(values) > 5 else "")
                self.avg_price_var.set(values[6] if len(values) > 6 else "")
                break

    def delete_selected_item(self):
        selection = self.tree.selection()
        if selection:
            name = self.tree.item(selection[0])["values"][0]
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{name}'?"):
                self.tree.delete(selection[0])
                self.save_items()
                self.update_total_profit()
                self.update_combobox_values()
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –±–æ—Ç–æ–º
                self.sync_items_with_bot()

    def show_context_menu(self, event):
        selection = self.tree.identify_row(event.y)
        if selection:
            self.tree.selection_set(selection)
            menu = tk.Menu(self.root, tearoff=0)
            menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.fill_form_from_tree)
            menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self.delete_selected_item)
            try:
                menu.tk_popup(event.x_root, event.y_root)
            finally:
                menu.grab_release()

    def update_combobox_values(self):
        names = [self.tree.item(c)["values"][0] for c in self.tree.get_children()]
        self.name_cb['values'] = names
        if hasattr(self, 'overlay_window'):
            self.overlay_window.update_autocomplete()

    def add_deal(self):
        price = self.deal_price_var.get().strip()
        deal_type = self.deal_type_var.get().strip()
        name = self.name_var.get().strip()

        if not price or not deal_type:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ü–µ–Ω—É –∏ —Ç–∏–ø —Å–¥–µ–ª–∫–∏!")
            return

        try:
            price_f = float(price)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞!")
            return

        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫/–∫–∫
        formatted_price = self._convert_number_format(price_f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        self._add_to_history(now, deal_type, price_f, name, formatted_price)
        
        self.save_deals()
        self.update_stats()
        self.deal_price_var.set("")

    def update_stats(self):
        count = len(self.history)
        profit = 0.0
        income = 0.0
        expenses = 0.0

        for deal in self.history:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–∂–∏–¥–∞–µ–º 4 –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ 6
            if len(deal) >= 4:
                dt, typ, price, name = deal[:4]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 –∑–Ω–∞—á–µ–Ω–∏—è
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ price - —á–∏—Å–ª–æ
                try:
                    price = float(price)
                except (ValueError, TypeError):
                    price = 0.0
                    
                if typ == "sell":
                    income += price
                    logger.debug(f"–ü—Ä–æ–¥–∞–∂–∞: {name} –∑–∞ ${price}, –¥–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ ${income}")
                    # –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–∏–±—ã–ª—å
                    for child in self.tree.get_children():
                        vals = self.tree.item(child)["values"]
                        if vals and vals[0] == name:
                            try:
                                buy = float(vals[2] if len(vals) > 2 else 0)  # –ü–æ–∫—É–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ 3-–º –ø–æ–ª–µ
                                repair = float(vals[4] if len(vals) > 4 else 0)  # –†–µ–º–æ–Ω—Ç —Ç–µ–ø–µ—Ä—å –≤ 5-–º –ø–æ–ª–µ
                                tax_pct = float(vals[5] if len(vals) > 5 else 0)  # –ù–∞–ª–æ–≥ —Ç–µ–ø–µ—Ä—å –≤ 6-–º –ø–æ–ª–µ
                                tax_amt = price * tax_pct / 100
                                profit += price - buy - repair - tax_amt
                                logger.debug(f"–ü—Ä–∏–±—ã–ª—å –ø–æ {name}: ${price} - ${buy} - ${repair} - ${tax_amt} = ${price - buy - repair - tax_amt}")
                            except (ValueError, IndexError):
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–∏–±—ã–ª—å –¥–ª—è {name}: {vals}")
                                pass
                            break
                elif typ == "buy":
                    expenses += price
                    logger.debug(f"–ü–æ–∫—É–ø–∫–∞: {name} –∑–∞ ${price}, —Ä–∞—Å—Ö–æ–¥—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –¥–æ ${expenses}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫

        net = income - expenses
        avg_profit = profit / count if count > 0 else 0
        avg_income = income / count if count > 0 else 0
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫={count}, –î–æ—Ö–æ–¥={income}, –†–∞—Å—Ö–æ–¥—ã={expenses}, –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å={net}, –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å={avg_profit}")

        self.stats_vars["count"].set(str(count))
        self.stats_vars["profit"].set(self._convert_number_format(profit))
        self.stats_vars["income"].set(self._convert_number_format(income))
        self.stats_vars["expenses"].set(self._convert_number_format(expenses))
        self.stats_vars["net"].set(self._convert_number_format(net))
        self.stats_vars["avg_profit"].set(self._convert_number_format(avg_profit))
        self.stats_vars["avg_income"].set(self._convert_number_format(avg_income))

    def toggle_overlay(self):
        if hasattr(self, 'overlay_window') and self.overlay_window.visible:
            self.overlay_window.hide()
            self.toggle_overlay_btn.config(text="–û–≤–µ—Ä–ª–µ–π –í–∫–ª")
        else:
            self.overlay_window.show()
            self.toggle_overlay_btn.config(text="–û–≤–µ—Ä–ª–µ–π –í—ã–∫–ª")

    def get_visible_items(self):
        items = []
        win = None
        try:
            if self.window_var.get():
                wins = [w for w in gw.getWindowsWithTitle(self.window_var.get()) if w.isActive]
                win = wins[0] if wins else None
            else:
                win = gw.getActiveWindow()
        except Exception:
            logger.debug("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∫–Ω–∞ –¥–ª—è OCR")
            return items

        if not win:
            return items
            
        try:
            if self.bbox:
                left = win.left + self.bbox[0]
                top = win.top + self.bbox[1]
                right = win.left + self.bbox[2]
                bottom = win.top + self.bbox[3]
                img = ImageGrab.grab(bbox=(left, top, right, bottom))
            else:
                img = ImageGrab.grab(bbox=(win.left, win.top, win.right, win.bottom))
                
            data = pytesseract.image_to_data(img, lang='rus+eng', output_type=pytesseract.Output.DICT)
            texts = [t.lower() for t in data.get('text', []) if str(t).strip()]
            
            for c in self.tree.get_children():
                vals = self.tree.item(c)["values"]
                name = str(vals[0]).lower()
                avg = vals[6] if len(vals) > 6 else "0"  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ 6-–º –ø–æ–ª–µ
                if all(word in texts for word in name.split()):
                    items.append((vals[0], avg))
                    
        except Exception:
            logger.debug("OCR –æ—à–∏–±–∫–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö)", exc_info=True)
            
        return items

    def scan_items_with_prices(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        scanned_items = []
        win = None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–∫–æ–Ω
            import time
            current_time = time.time() * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            if (self.window_cache is None or 
                current_time - self.window_cache_time > self.window_cache_ttl):
                
                if self.window_var.get():
                    wins = [w for w in gw.getWindowsWithTitle(self.window_var.get()) if w.isActive]
                    win = wins[0] if wins else None
                else:
                    # –ò—â–µ–º –æ–∫–Ω–æ RAGE Multiplayer
                    rage_windows = [w for w in gw.getAllWindows() if 'rage' in w.title.lower() or 'multiplayer' in w.title.lower()]
                    if rage_windows:
                        win = rage_windows[0]
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º –æ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å
                        try:
                            win.activate()
                        except Exception:
                            pass
                    else:
                        # –ï—Å–ª–∏ RAGE Multiplayer –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –æ–∫–Ω–æ GTA5
                        gta_windows = [w for w in gw.getAllWindows() if 'gta' in w.title.lower() or 'grand theft auto' in w.title.lower()]
                        if gta_windows:
                            win = gta_windows[0]
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º –æ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å
                            try:
                                win.activate()
                            except Exception:
                                pass
                        else:
                            # –ï—Å–ª–∏ GTA5 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                            active_win = gw.getActiveWindow()
                            if active_win and '–ø–µ—Ä–µ–∫—É–ø' not in active_win.title.lower() and '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' not in active_win.title.lower():
                                win = active_win
                            else:
                                # –ò—â–µ–º –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ
                                all_windows = [w for w in gw.getAllWindows() if w.title and '–ø–µ—Ä–µ–∫—É–ø' not in w.title.lower() and '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' not in w.title.lower()]
                                if all_windows:
                                    win = all_windows[0]
                                else:
                                    return scanned_items
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.window_cache = win
                self.window_cache_time = current_time
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ
                win = self.window_cache
        except Exception as e:
            logger.debug("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∫–Ω–∞ –¥–ª—è OCR")
            return scanned_items

        if not win:
            return scanned_items
            
        try:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR
            if self.bbox:
                left = win.left + self.bbox[0]
                top = win.top + self.bbox[1]
                right = win.left + self.bbox[2]
                bottom = win.top + self.bbox[3]
                img = ImageGrab.grab(bbox=(left, top, right, bottom))
            else:
                img = ImageGrab.grab(bbox=(win.left, win.top, win.right, win.bottom))
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            max_width, max_height = 1200, 800  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            if img.size[0] > max_width or img.size[1] > max_height:
                ratio = min(max_width / img.size[0], max_height / img.size[1])
                new_size = (int(img.size[0] * ratio), int(img.size[1] * ratio))
                img = img.resize(new_size, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            if img.mode != 'L':
                img = img.convert('L')
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            enhancer = ImageEnhance.Contrast(img)
            img = enhancer.enhance(1.2)  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
                
            # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–µ—Å–ª–∏ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω)
            if HAS_TESSERACT and self.ocr_enabled:
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                custom_config = r'--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—èABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,:()/- '
                data = pytesseract.image_to_data(img, lang='rus+eng', output_type=pytesseract.Output.DICT, config=custom_config)
            else:
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.debug("OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                messagebox.showinfo("OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 
                                  "–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
                                  "–î–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tesseract OCR.\n"
                                  "–°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞:\n"
                                  "https://github.com/UB-Mannheim/tesseract/releases")
                return scanned_items
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            gc.collect()
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã
            import re
            texts = data.get('text', [])
            lefts = data.get('left', [])
            tops = data.get('top', [])
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            filtered_texts = []
            filtered_lefts = []
            filtered_tops = []
            confidences = data.get('conf', [])
            
            for i, text in enumerate(texts):
                if text and text.strip():
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –º—É—Å–æ—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    cleaned_text = (self._re_clean_text.sub('', text.strip()) if self._re_clean_text else re.sub(r'[^\w\s.,:()/-]', '', text.strip()))
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏—Å–∫–∞–∂–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
                    if self._is_valid_text(cleaned_text):
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                        if (len(cleaned_text) >= 2 and 
                            confidences[i] > self.ocr_settings['min_confidence'] and
                            not (self._re_only_specials.match(cleaned_text) if self._re_only_specials else re.match(r'^[^\w]*$', cleaned_text))):  # –ù–µ —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
                            
                            filtered_texts.append(cleaned_text)
                            filtered_lefts.append(lefts[i])
                            filtered_tops.append(tops[i])
            
            texts = filtered_texts
            lefts = filtered_lefts
            tops = filtered_tops
            
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            prices = []
            for i, text in enumerate(texts):
                if text and text.strip():
                    # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ (—Ü–µ–Ω—ã)
                    numbers = (self._re_digits.findall(text) if self._re_digits else re.findall(r'\d+', text))
                    if numbers:
                        x = lefts[i]
                        y = tops[i]
                        for num in numbers:
                            price = int(num)
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã
                            if (self.ocr_settings['min_price'] <= price <= 
                                self.ocr_settings['max_price']):
                                prices.append((price, x, y))
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            import time
            current_time = time.time() * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            if (self.item_names_cache is None or 
                current_time - self.item_names_cache_time > self.item_names_cache_ttl):
                
                item_names = []
                for c in self.tree.get_children():
                    vals = self.tree.item(c)["values"]
                    if len(vals) >= 7:
                        item_name = vals[0]
                        avg_price = float(vals[6]) if vals[6] else 0
                        item_names.append((item_name, avg_price))
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.item_names_cache = item_names
                self.item_names_cache_time = current_time
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
                item_names = self.item_names_cache
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –∏—â–µ–º –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏ –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É
            for item_name, avg_price in item_names:
                found = False
                item_name_lower = item_name.lower()
                
                # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –Ω–µ—á–µ—Ç–∫–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
                item_words = item_name_lower.split()
                found_words = []
                item_positions = []
                match_scores = []
                
                # –ò—â–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –Ω–µ—á–µ—Ç–∫–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
                for word in item_words:
                    best_match = None
                    best_score = 0
                    best_position = None
                    
                    for i, text in enumerate(texts):
                        if text:
                            text_lower = text.lower()
                            
                            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                            if word in text_lower:
                                score = 100
                            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞)
                            elif any(text_lower.startswith(w) for w in [word[:3], word[:4], word[:5]]):
                                score = 80
                            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç —á–∞—Å—Ç—å —Å–ª–æ–≤–∞)
                            elif any(w in text_lower for w in [word[:3], word[:4]]):
                                score = 60
                            else:
                                continue
                                
                            if score > best_score:
                                best_score = score
                                best_match = word
                                best_position = (lefts[i], tops[i])
                    
                    if best_match and best_score >= 60:
                        found_words.append(best_match)
                        item_positions.append(best_position)
                        match_scores.append(best_score)
                
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ —Å —Ö–æ—Ä–æ—à–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏
                if (len(found_words) >= len(item_words) // 2 + 1 and 
                    sum(match_scores) / len(match_scores) >= self.ocr_settings['min_match_score']):
                    # –ë–µ—Ä–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                    item_x, item_y = item_positions[0]
                    
                    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –ø–æ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ (–≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ)
                    closest_price = None
                    min_distance = float('inf')
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω - –∏—â–µ–º –≤ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
                    for price, px, py in prices:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ (—Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ Y –Ω–µ –±–æ–ª—å—à–µ 50 –ø–∏–∫—Å–µ–ª–µ–π)
                        y_diff = abs(py - item_y)
                        if y_diff <= 50:
                            distance = abs(px - item_x)
                            if distance < min_distance:
                                min_distance = distance
                                closest_price = price
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –≤–æ–æ–±—â–µ
                    if not closest_price and prices:
                        for price, px, py in prices:
                            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (X + Y)
                            total_distance = abs(px - item_x) + abs(py - item_y)
                            if total_distance < min_distance:
                                min_distance = total_distance
                                closest_price = price
                    
                    if closest_price:
                        scanned_items.append((item_name, str(closest_price), str(avg_price)))
                        found = True
                        break
                
                if not found:
                    # –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π
                    scanned_items.append((item_name, "0", str(avg_price)))
                        
        except Exception:
            logger.debug("OCR –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏", exc_info=True)
        finally:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            gc.collect()
            
        return scanned_items

    def _is_valid_text(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞"""
        if not text or len(text) < 3:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
            return False
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        garbage_patterns = [
            r'^[^\w]*$',  # –¢–æ–ª—å–∫–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            r'^[–∞-—è—ë]{1,2}$',  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞
            r'^[a-z]{1,2}$',  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
            r'^[0-9]+$',  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            r'^[^\w\s]*$',  # –¢–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            r'^[–∞-—è—ë]*[—ã—ã]+[–∞-—è—ë]*$',  # –°–æ–¥–µ—Ä–∂–∏—Ç "—ã—ã" (–º—É—Å–æ—Ä)
            r'^[–∞-—è—ë]*[–∞-—è—ë]{1,2}[–∞-—è—ë]*$',  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
            r'^[–∞-—è—ë]*[–∞-—è—ë]{1,3}$',  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
            r'^[–∞-—è—ë]*[–∞-—è—ë]{1,3}[–∞-—è—ë]*$',  # –°–æ–¥–µ—Ä–∂–∏—Ç –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
            r'^[–∞-—è—ë]*[–∞-—è—ë]{1,3}[–∞-—è—ë]*[–∞-—è—ë]{1,3}[–∞-—è—ë]*$',  # –ú–Ω–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —á–∞—Å—Ç–µ–π
        ]
        
        for pattern in garbage_patterns:
            if re.match(pattern, text, re.IGNORECASE):
                return False
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        special_chars = len(re.findall(r'[^\w\s]', text))
        if special_chars > len(text) * 0.2:  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 20% —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        suspicious_patterns = [
            r'^[–∞-—è—ë]{1,3}[–∞-—è—ë]{1,3}$',  # –î–≤–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤–∞
            r'^[–∞-—è—ë]{1,2}[–∞-—è—ë]{1,2}[–∞-—è—ë]{1,2}$',  # –¢—Ä–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤–∞
            r'^[–∞-—è—ë]*[–∞-—è—ë]{1,2}[–∞-—è—ë]*[–∞-—è—ë]{1,2}[–∞-—è—ë]*$',  # –ú–Ω–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —á–∞—Å—Ç–µ–π
        ]
        
        for pattern in suspicious_patterns:
            if re.match(pattern, text, re.IGNORECASE):
                return False
            
        return True

    # ---------------- –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –°–ö–ê–ù–ï–† –õ–û–¢–û–í (F7) ----------------
    def intelligent_lot_scanner(self):
        """F7: –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏, OCR, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ü–µ–Ω—ã, –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã."""
        try:
            overlay = SelectionOverlay(self.root)
            # –ñ–¥–µ–º –≤—ã–±–æ—Ä –æ–±–ª–∞—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
            def worker():
                bbox = overlay.get_bbox()
                if not bbox:
                    return
                try:
                    img = ImageGrab.grab(bbox=bbox)
                    data = pytesseract.image_to_data(img, lang='rus+eng', output_type=pytesseract.Output.DICT)
                    text_lines = []
                    n = len(data.get('text', []))
                    for i in range(n):
                        t = str(data['text'][i]).strip()
                        if t:
                            text_lines.append(t)
                    full_text = " ".join(text_lines)
                    name, price = self._extract_name_and_price(full_text)
                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                    def show_preview():
                        self._show_scan_preview(name, price)
                    self.root.after(0, show_preview)
                except Exception:
                    logger.exception("–û—à–∏–±–∫–∞ –≤ —Å–∫–∞–Ω–µ—Ä–µ –ª–æ—Ç–æ–≤")
            threading.Thread(target=worker, daemon=True).start()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ –ª–æ—Ç–æ–≤")

    def _handle_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –¥–ª—è tkinter (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ keyboard)"""
        if event.keysym == "backslash":
            self.toggle_page_refresh()
        elif event.keysym == "F8":
            self.toggle_overlay()
        elif event.keysym == "F7":
            self.intelligent_lot_scanner()
    
    def reload_hotkeys(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        try:
            if HAS_KEYBOARD:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                self._register_hotkeys()
                messagebox.showinfo("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                logger.info("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            else:
                messagebox.showinfo("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è tkinter –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n{str(e)}")
    
    def _register_hotkeys(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if HAS_KEYBOARD:
            try:
                # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
                keyboard.unhook_all()
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É F8 –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è")
                keyboard.add_hotkey("F8", self._safe_toggle_overlay, suppress=True)
                
                logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É \\ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª–∞–≤–∏—à–∏ \
                    keyboard.add_hotkey("\\", self._safe_toggle_page_refresh, suppress=True)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å \\: {e}")
                    try:
                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                        keyboard.add_hotkey("backslash", self._safe_toggle_page_refresh, suppress=True)
                    except Exception as e2:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å backslash: {e2}")
                        try:
                            # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
                            keyboard.add_hotkey("ctrl+\\", self._safe_toggle_page_refresh, suppress=True)
                        except Exception as e3:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å ctrl+\\: {e3}")
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º F9 –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
                            keyboard.add_hotkey("F9", self._safe_toggle_page_refresh, suppress=True)
                            logger.info("–ò—Å–ø–æ–ª—å–∑—É—é F9 –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¥–ª—è \\")
                
                logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É F7 –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ –ª–æ—Ç–æ–≤")
                keyboard.add_hotkey("F7", self._safe_intelligent_lot_scanner, suppress=True)
                
                logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É F6 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏")
                keyboard.add_hotkey("F6", self._safe_get_mouse_position, suppress=True)
                
                logger.info("–í—Å–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                
            except Exception as e:
                logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: {e}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                messagebox.showerror("–û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à", 
                                   f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n{str(e)}\n\n"
                                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —á–µ—Ä–µ–∑ tkinter")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ tkinter (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å–µ)
            self.root.bind("<F8>", lambda e: self.toggle_overlay())
            self.root.bind("<F7>", lambda e: self.intelligent_lot_scanner())
            self.root.bind("<F9>", lambda e: self.toggle_page_refresh())  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è \
            self.root.bind("<Key>", self._handle_key_press)
            messagebox.showinfo("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", 
                              "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                              "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ F8, F7, F9 —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å–µ.\n"
                              "F9 - –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ \\)")
    
    def _safe_toggle_overlay(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.toggle_overlay()
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ–≤–µ—Ä–ª–µ—è —á–µ—Ä–µ–∑ –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É")
    
    def _safe_toggle_page_refresh(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.toggle_page_refresh()
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É")
    
    def _safe_intelligent_lot_scanner(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –ª–æ—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.intelligent_lot_scanner()
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–µ—Ä–∞ –ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É")
    
    def _safe_get_mouse_position(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.get_mouse_position()
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏ —á–µ—Ä–µ–∑ –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É")
    
    def _start_hotkeys_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        if HAS_KEYBOARD and self.hotkeys_monitor_enabled:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            self._check_hotkeys_periodically()
    
    def _start_payday_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ PayDay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.payday_notifications_enabled:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            self._check_payday_notification()
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PayDay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    def _check_hotkeys_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        if not self.hotkeys_monitor_enabled or not self.running:
            return
            
        try:
            current_time = time.time()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if current_time - self.hotkeys_last_check > 30:
                self.hotkeys_last_check = current_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
                # –ï—Å–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Ö
                try:
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–ª–∞–≤–∏—à—É
                    test_key = f"ctrl+alt+{int(time.time()) % 10}"
                    keyboard.add_hotkey(test_key, lambda: None, suppress=True)
                    keyboard.remove_hotkey(test_key)
                    logger.debug("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                except Exception:
                    logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏, –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é...")
                    self._register_hotkeys()
                    
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if self.running:
            self.root.after(30000, self._check_hotkeys_periodically)  # 30 —Å–µ–∫—É–Ω–¥
    
    def _check_payday_notification(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay"""
        if not self.payday_notifications_enabled or not self.running:
            return
            
        try:
            now = datetime.now()
            current_minute = now.minute
            current_hour = now.hour
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å 49 –º–∏–Ω—É—Ç–∞
            if current_minute == 49:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Å
                notification_key = f"{current_hour}:49"
                if self.last_payday_notification != notification_key:
                    self.last_payday_notification = notification_key
                    self._show_payday_notification()
            else:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ 49 –º–∏–Ω—É—Ç–∞
                self.last_payday_notification = None
                
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ PayDay")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        if self.running:
            self.root.after(30000, self._check_payday_notification)
    
    def _show_payday_notification(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ PayDay"""
        try:
            now = datetime.now()
            next_hour = now.hour + 1
            if next_hour >= 24:
                next_hour = 0
            
            message = f"‚ö†Ô∏è PAYDAY –ß–ï–†–ï–ó 11 –ú–ò–ù–£–¢! ‚ö†Ô∏è\n\n–°–ª–µ–¥—É—é—â–∏–π PayDay –≤ {next_hour:02d}:00"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–≤–µ—Ä–ª–µ–µ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
            if hasattr(self, 'overlay_window') and self.overlay_window.visible:
                self.overlay_window.show_notification("PAYDAY –ß–ï–†–ï–ó 11 –ú–ò–ù–£–¢!", "#ff6600", 10000)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                import tkinter.messagebox as mb
                mb.showwarning("PayDay Alert", message)
            except Exception:
                pass
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            logger.info(f"PayDay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ: {message}")
            
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è PayDay")
    
    def _on_window_minimize(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if self.page_refresh_enabled:
            logger.info("–û–∫–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            self.page_refresh_enabled = False
            self.auto_enter_status_var.set("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í—ã–∫–ª (–æ–∫–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ–≤–µ—Ä–ª–µ–µ
            if hasattr(self, 'overlay_window'):
                self.overlay_window.update_auto_enter_status(False)
    
    def _on_window_restore(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞"""
        # –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
        # logger.info("–û–∫–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    
    # –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã
    
    # –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã
    # –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã
    
    # –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã
    
    # –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã
    
    # –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã
    
    # –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã
    
    def clear_all_history(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            record_count = len(self.history)
            
            if record_count == 0:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ —É–∂–µ –ø—É—Å—Ç–∞!")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            result = messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫?\n\n"
                f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {record_count} –∑–∞–ø–∏—Å–µ–π.\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                icon="warning"
            )
            
            if result:
                # –û—á–∏—â–∞–µ–º TreeView
                for item in self.history_tree.get_children():
                    self.history_tree.delete(item)
                
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
                self.history.clear()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                self.save_deals()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.update_stats()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!\n–£–¥–∞–ª–µ–Ω–æ {record_count} –∑–∞–ø–∏—Å–µ–π.")
                
                logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {record_count} –∑–∞–ø–∏—Å–µ–π")
                
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫:\n{str(e)}")
    
    def clean_garbage_history(self):
        """–û—á–∏—â–∞–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            garbage_words = ['–≤—ã–∫–ª', '—Å–¥–µ–ª–æ–∫', '–±—Ä–µ–µ–∞', 'line', 'woos', '–µ–∂–∞', 'j 8', '—å–∞', '–µ–Ω4', '–±–∞ –∏', 'cae ke', '.', '..', '...', '....', '.....']
            removed_count = 0
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
            filtered_history = []
            for record in self.history:
                name = record[3] if len(record) > 3 else ''  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º—É—Å–æ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                is_garbage = False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Å–æ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
                if any(word in name.lower() for word in garbage_words):
                    is_garbage = True
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Ü–∏—Ñ—Ä
                if re.match(r'^[\d\.\s]+$', name):
                    is_garbage = True
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                if len(name) < 3:
                    is_garbage = True
                
                if not is_garbage:
                    filtered_history.append(record)
                else:
                    removed_count += 1
            
            if removed_count > 0:
                self.history = filtered_history
                
                # –û–±–Ω–æ–≤–ª—è–µ–º TreeView
                for item in self.history_tree.get_children():
                    self.history_tree.delete(item)
                
                for record in self.history:
                    self.history_tree.insert('', 'end', values=record)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                self.save_deals()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.update_stats()
                
                messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –º—É—Å–æ—Ä–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
                logger.info(f"–û—á–∏—â–µ–Ω–æ {removed_count} –º—É—Å–æ—Ä–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
            else:
                messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–ú—É—Å–æ—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º—É—Å–æ—Ä–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –º—É—Å–æ—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n{str(e)}")
    
    def show_history_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            item = self.history_tree.selection()[0] if self.history_tree.selection() else None
            
            if not item:
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            context_menu = tk.Menu(self.root, tearoff=0, bg="#2e2e2e", fg="#ffffff")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
            context_menu.add_command(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", command=lambda: self.delete_history_record(item))
            context_menu.add_separator()
            context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", command=lambda: self.copy_history_record(item))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            context_menu.tk_popup(event.x_root, event.y_root)
            
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏")
    
    def delete_history_record(self, item):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            values = self.history_tree.item(item)["values"]
            if not values:
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            result = messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
                f"–î–∞—Ç–∞: {values[0]}\n"
                f"–¢–∏–ø: {values[1]}\n"
                f"–¶–µ–Ω–∞: {values[2]}\n"
                f"–¢–æ–≤–∞—Ä: {values[3]}",
                icon="warning"
            )
            
            if result:
                print(f"üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {values}")
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–∫–µ –∏—Å—Ç–æ—Ä–∏–∏
                record_index = None
                for i, record in enumerate(self.history):
                    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å {i}: {record}")
                    if (len(record) >= 4 and 
                        record[0] == values[0] and 
                        record[1] == values[1] and 
                        record[3] == values[3]):
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        record_price = float(record[2])
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Å–ª–æ
                            formatted_price_str = values[2].replace(',', '.').replace(' ', '')
                            print(f"üîç –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º '{values[2]}' ‚Üí '{formatted_price_str}'")
                            
                            if formatted_price_str.endswith('–∫'):
                                formatted_price = float(formatted_price_str.replace('–∫', '')) * 1000
                            elif formatted_price_str.endswith('–∫–∫'):
                                formatted_price = float(formatted_price_str.replace('–∫–∫', '')) * 1000000
                            else:
                                formatted_price = float(formatted_price_str)
                            
                            print(f"üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: {record_price} vs {formatted_price} (—Ä–∞–∑–Ω–∏—Ü–∞: {abs(record_price - formatted_price)})")
                            
                            # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                            if abs(record_price - formatted_price) < 1.0:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                                record_index = i
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i} (—Ü–µ–Ω–∞: {record_price} ‚âà {formatted_price})")
                                break
                        except ValueError:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                            if str(record[2]) == values[2]:
                                record_index = i
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}")
                                break
                
                if record_index is not None:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
                    deleted_record = self.history.pop(record_index)
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ TreeView
                    self.history_tree.delete(item)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    self.save_deals()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.update_stats()
                    
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {deleted_record}")
                    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏!")
                else:
                    print(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏!")
            
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å:\n{str(e)}")
    
    def copy_history_record(self, item):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            values = self.history_tree.item(item)["values"]
            if not values:
                    return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            text_to_copy = f"–î–∞—Ç–∞: {values[0]}\n–¢–∏–ø: {values[1]}\n–¶–µ–Ω–∞: {values[2]}\n–¢–æ–≤–∞—Ä: {values[3]}"
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            self.root.clipboard_clear()
            self.root.clipboard_append(text_to_copy)
            
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
            
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{str(e)}")
    
    def toggle_fast_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞"""
        try:
            self.auto_import_fast_mode = not self.auto_import_fast_mode
            
            if self.auto_import_fast_mode:
                self.fast_mode_btn.config(text="‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º", bg="#006600")
                messagebox.showinfo("–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω", 
                    "–í–∫–ª—é—á–µ–Ω –ë–´–°–¢–†–´–ô —Ä–µ–∂–∏–º!\n\n"
                    "‚Ä¢ –ú–µ–Ω—å—à–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏\n"
                    "‚Ä¢ –ë—ã—Å—Ç—Ä–µ–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                    "‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º")
            else:
                self.fast_mode_btn.config(text="üêå –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", bg="#666600")
                messagebox.showinfo("–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω", 
                    "–í–∫–ª—é—á–µ–Ω –û–ë–´–ß–ù–´–ô —Ä–µ–∂–∏–º!\n\n"
                    "‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏\n"
                    "‚Ä¢ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
                    "‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –Ω–∞–¥–µ–∂–Ω–µ–µ")
            
            logger.info(f"–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞: {'–≤–∫–ª—é—á–µ–Ω' if self.auto_import_fast_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")
            
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º:\n{str(e)}")
    
    def _scroll_page_down(self, window):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑"""
        try:
            if HAS_PYAUTOGUI:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫–Ω–æ
                window.activate()
                time.sleep(0.05)  # –£–º–µ–Ω—å—à–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                window_height = window.bottom - window.top
                scroll_amount = max(25, min(60, window_height // 15))  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
                scroll_count = 2 if self.auto_import_fast_mode else 3
                scroll_delay = 0.02 if self.auto_import_fast_mode else 0.03
                
                # –î–µ–ª–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                for i in range(scroll_count):
                    pyautogui.scroll(-scroll_amount)
                    time.sleep(scroll_delay)
                
                # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è)
                stabilization_delay = self.auto_import_scroll_delay * 0.7 if self.auto_import_fast_mode else self.auto_import_scroll_delay
                time.sleep(stabilization_delay)
                
                logger.debug(f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {scroll_amount}px x {scroll_count} (–∑–∞–¥–µ—Ä–∂–∫–∞: {stabilization_delay:.2f}s)")
                
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    
    # –§—É–Ω–∫—Ü–∏—è _save_auto_import_settings —É–¥–∞–ª–µ–Ω–∞
    
    def _extract_name_and_price(self, text):
        """–ì—Ä—É–±—ã–π –ø–∞—Ä—Å–µ—Ä: –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É –∏ —Ä–∞–∑—É–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ OCR.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (name:str|None, price:float|None).
        """
        if not text:
            return None, None
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        t = text.replace("\n", " ").replace("$", " ")
        # –ò—â–µ–º —Ü–µ–Ω—É: —á–∏—Å–ª–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–∞–ø—è—Ç—ã–º–∏ –∫–∞–∫ —Ç—ã—Å—è—á–∏/—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        price = None
        price_match = (self._re_price_in_text.search(t) if self._re_price_in_text else re.search(r"(\d[\d\s.,]{2,})", t))
        if price_match:
            raw = price_match.group(1)
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á, –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –Ω–æ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ç—ã—Å—è—á —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–º –∑–∞–ø—è—Ç—ã–µ
            cleaned = raw.replace(" ", "")
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∑–∞–ø—è—Ç—ã–µ, –∏ —Ç–æ—á–∫–∏, —É–±–µ—Ä–µ–º –∑–∞–ø—è—Ç—ã–µ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
            if "," in cleaned and "." in cleaned:
                cleaned = cleaned.replace(",", "")
            else:
                cleaned = cleaned.replace(",", ".")
            try:
                price_val = float(cleaned)
                # –û—Ç—Å–µ–∫–∞–µ–º –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–µ/–±–æ–ª—å—à–∏–µ —Ü–∏—Ñ—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if 0 < price_val < 1e10:
                    price = price_val
            except Exception:
                pass

        # –ò–º—è: –≤–æ–∑—å–º–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ü–µ–Ω—ã –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫, —É–±–µ—Ä–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        name = None
        if price_match:
            prefix = t[:price_match.start()].strip()
            prefix = (self._re_clean_text.sub(" ", prefix) if self._re_clean_text else re.sub(r"[^\w\s\-._–ê-–Ø–∞-—è–Å—ë]", " ", prefix))
            prefix = re.sub(r"\s+", " ", prefix).strip()
            if prefix:
                name = prefix

        return name, price

    def _show_scan_preview(self, name, price):
        """–û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É.
        –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å.
        """
        win = tk.Toplevel(self.root)
        win.title("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ—Ç–∞")
        win.configure(bg="#1e1e1e")
        win.resizable(False, False)

        tk.Label(win, text="–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –ª–æ—Ç", bg="#1e1e1e", fg="#ffffff", font=("Arial", 12, "bold")).pack(padx=12, pady=(10, 6))

        form = tk.Frame(win, bg="#1e1e1e")
        form.pack(padx=12, pady=6, fill="x")

        tk.Label(form, text="–ù–∞–∑–≤–∞–Ω–∏–µ:", bg="#1e1e1e", fg="#ffffff").grid(row=0, column=0, sticky="e", padx=5, pady=4)
        name_var = tk.StringVar(value=name or "")
        name_entry = tk.Entry(form, textvariable=name_var, width=40)
        name_entry.grid(row=0, column=1, sticky="w", padx=5, pady=4)

        tk.Label(form, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:", bg="#1e1e1e", fg="#ffffff").grid(row=1, column=0, sticky="e", padx=5, pady=4)
        avg_var = tk.StringVar(value=(f"{price:.0f}" if isinstance(price, (int, float)) else ""))
        avg_entry = tk.Entry(form, textvariable=avg_var, width=20)
        avg_entry.grid(row=1, column=1, sticky="w", padx=5, pady=4)

        tk.Label(form, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", bg="#1e1e1e", fg="#ffffff").grid(row=2, column=0, sticky="e", padx=5, pady=4)
        comment_var = tk.StringVar()
        comment_entry = tk.Entry(form, textvariable=comment_var, width=40)
        comment_entry.grid(row=2, column=1, sticky="w", padx=5, pady=4)

        btns = tk.Frame(win, bg="#1e1e1e")
        btns.pack(padx=12, pady=(8, 12))

        def on_ok():
            try:
                self.name_var.set(name_var.get().strip())
                self.avg_price_var.set(avg_var.get().strip())
                self.comment_var.set(comment_var.get().strip())  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                self.add_or_update()
                win.destroy()
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–æ—Ç–∞")

        def on_cancel():
            win.destroy()

        tk.Button(btns, text="–î–æ–±–∞–≤–∏—Ç—å", command=on_ok, bg="#333333", fg="#ffffff", width=14).pack(side=tk.LEFT, padx=6)
        tk.Button(btns, text="–û—Ç–º–µ–Ω–∞", command=on_cancel, bg="#333333", fg="#ffffff", width=14).pack(side=tk.LEFT, padx=6)

        # –§–æ–∫—É—Å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
        comment_entry.focus_set()

    # ---------------- –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–ö–ê–ù–ï–† (F6) ----------------
    

    def ocr_loop(self):
        while self.running and self.ocr_enabled:
            if self.overlays_enabled:
                items = self.get_visible_items()
                try:
                    self.ocr_queue.put(items, timeout=0.5)
                except Exception:
                    pass
            time.sleep(self.overlay_refresh)

    def update_overlay_safe(self):
        if self.running and self.overlays_enabled:
            # –ï—Å–ª–∏ –≤ –æ–≤–µ—Ä–ª–µ–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ–∏—Å–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º OCR-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —á–∏—Å—Ç–∏–º –æ—á–µ—Ä–µ–¥—å
            try:
                if hasattr(self, 'overlay_window') and self.overlay_window.search_var.get().strip():
                    while not self.ocr_queue.empty():
                        try:
                            self.ocr_queue.get_nowait()
                        except Exception:
                            break
                elif not self.ocr_queue.empty():
                    new_items = self.ocr_queue.get()
                    try:
                        if hasattr(self, 'overlay_window'):
                            self.overlay_window.update_list(new_items)
                    except Exception:
                        logger.exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è")
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ OCR")
        if self.running and self.ocr_enabled:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.root.after(200, self.update_overlay_safe)  # 200–º—Å –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    def update_window_list(self):
        try:
            if HAS_GETWINDOW and gw:
                titles = [w.title for w in gw.getAllWindows() if w.title]
                self.window_cb['values'] = titles
            else:
                self.window_cb['values'] = ["–ú–æ–¥—É–ª—å pygetwindow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"]
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∫–æ–Ω")

    def check_tesseract(self):
        try:
            if HAS_TESSERACT:
                pytesseract.get_tesseract_version()
                logger.info("Tesseract OCR –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                self.ocr_enabled = True
            else:
                self.ocr_enabled = False
                logger.warning("Tesseract OCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                messagebox.showinfo("Tesseract OCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
                                  "–î–ª—è —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tesseract OCR.\n\n"
                                  "–°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞:\n"
                                  "https://github.com/UB-Mannheim/tesseract/releases\n\n"
                                  "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        except Exception as e:
            self.ocr_enabled = False
            logger.warning(f"Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}. –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            messagebox.showwarning("Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                                  f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Tesseract OCR: {e}\n\n"
                                  "–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n"
                                  "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract OCR.")

    # –ú–µ—Ç–æ–¥ get_coords_and_set —É–¥–∞–ª–µ–Ω
    
    def open_settings(self):
        settings_win = tk.Toplevel(self.root)
        settings_win.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_win.geometry("500x600")
        settings_win.configure(bg="#1e1e1e")

        # –°–æ–∑–¥–∞–µ–º notebook (–≤–∫–ª–∞–¥–∫–∏)
        notebook = ttk.Notebook(settings_win)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        main_frame = tk.Frame(notebook, bg="#1e1e1e")
        notebook.add(main_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ")
        
        tk.Label(main_frame, text="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–≤–µ—Ä–ª–µ—è (0-1):", bg="#1e1e1e", fg="#fff").pack(pady=5)
        alpha_var = tk.StringVar(value=str(self.overlay_alpha))
        alpha_entry = tk.Entry(main_frame, textvariable=alpha_var)
        alpha_entry.pack(pady=5)

        tk.Label(main_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫):", bg="#1e1e1e", fg="#fff").pack(pady=5)
        interval_var = tk.StringVar(value=str(self.overlay_refresh))
        interval_entry = tk.Entry(main_frame, textvariable=interval_var)
        interval_entry.pack(pady=5)

        tk.Label(main_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–º—Å):", bg="#1e1e1e", fg="#fff").pack(pady=5)
        auto_scan_interval_var = tk.StringVar(value=str(self.auto_scan_interval))
        auto_scan_interval_entry = tk.Entry(main_frame, textvariable=auto_scan_interval_var)
        auto_scan_interval_entry.pack(pady=5)

        tk.Label(main_frame, text="–û–±–ª–∞—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (left,top,right,bottom):", bg="#1e1e1e", fg="#fff").pack(pady=5)
        bbox_var = tk.StringVar(value=str(self.bbox) if self.bbox else "")
        bbox_entry = tk.Entry(main_frame, textvariable=bbox_var, width=40)
        bbox_entry.pack(pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        mobile_frame = tk.Frame(notebook, bg="#1e1e1e")
        notebook.add(mobile_frame, text="–ú–æ–±–∏–ª—å–Ω—ã–π")
        
        tk.Label(mobile_frame, text="–•–æ—Å—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", bg="#1e1e1e", fg="#fff").pack(pady=5)
        mobile_host_var = tk.StringVar(value=self.settings.get('mobile_host', '0.0.0.0'))
        mobile_host_entry = tk.Entry(mobile_frame, textvariable=mobile_host_var)
        mobile_host_entry.pack(pady=5)
        
        tk.Label(mobile_frame, text="–ü–æ—Ä—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", bg="#1e1e1e", fg="#fff").pack(pady=5)
        mobile_port_var = tk.StringVar(value=str(self.settings.get('mobile_port', 8080)))
        mobile_port_entry = tk.Entry(mobile_frame, textvariable=mobile_port_var)
        mobile_port_entry.pack(pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ
        info_text = """üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:

‚Ä¢ 0.0.0.0 - –¥–æ—Å—Ç—É–ø –∏–∑ –ª—é–±–æ–π —Å–µ—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ 127.0.0.1 - —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
‚Ä¢ [IP] - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ IP

üì± –î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ
2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ Windows
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å

‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é!"""
        
        info_label = tk.Label(mobile_frame, text=info_text, bg="#1e1e1e", fg="#ffff00", 
                             justify="left", font=("Arial", 9))
        info_label.pack(pady=10, padx=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OCR
        ocr_frame = tk.Frame(notebook, bg="#1e1e1e")
        notebook.add(ocr_frame, text="OCR")
        
        tk.Label(ocr_frame, text="–§–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ (1.0-3.0):", bg="#1e1e1e", fg="#fff").pack(pady=5)
        contrast_var = tk.StringVar(value=str(self.ocr_settings['contrast_factor']))
        contrast_entry = tk.Entry(ocr_frame, textvariable=contrast_var)
        contrast_entry.pack(pady=5)
        
        tk.Label(ocr_frame, text="–§–∞–∫—Ç–æ—Ä —Ä–µ–∑–∫–æ—Å—Ç–∏ (1.0-3.0):", bg="#1e1e1e", fg="#fff").pack(pady=5)
        sharpness_var = tk.StringVar(value=str(self.ocr_settings['sharpness_factor']))
        sharpness_entry = tk.Entry(ocr_frame, textvariable=sharpness_var)
        sharpness_entry.pack(pady=5)
        
        tk.Label(ocr_frame, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR (0-100):", bg="#1e1e1e", fg="#fff").pack(pady=5)
        confidence_var = tk.StringVar(value=str(self.ocr_settings['min_confidence']))
        confidence_entry = tk.Entry(ocr_frame, textvariable=confidence_var)
        confidence_entry.pack(pady=5)
        
        tk.Label(ocr_frame, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:", bg="#1e1e1e", fg="#fff").pack(pady=5)
        min_price_var = tk.StringVar(value=str(self.ocr_settings['min_price']))
        min_price_entry = tk.Entry(ocr_frame, textvariable=min_price_var)
        min_price_entry.pack(pady=5)
        
        tk.Label(ocr_frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:", bg="#1e1e1e", fg="#fff").pack(pady=5)
        max_price_var = tk.StringVar(value=str(self.ocr_settings['max_price']))
        max_price_entry = tk.Entry(ocr_frame, textvariable=max_price_var)
        max_price_entry.pack(pady=5)
        
        tk.Label(ocr_frame, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (0-100):", bg="#1e1e1e", fg="#fff").pack(pady=5)
        match_score_var = tk.StringVar(value=str(self.ocr_settings['min_match_score']))
        match_score_entry = tk.Entry(ocr_frame, textvariable=match_score_var)
        match_score_entry.pack(pady=5)
        
        tk.Label(ocr_frame, text="–§–∞–∫—Ç–æ—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1.0-2.0):", bg="#1e1e1e", fg="#fff").pack(pady=5)
        scale_var = tk.StringVar(value=str(self.ocr_settings['image_scale_factor']))
        scale_entry = tk.Entry(ocr_frame, textvariable=scale_var)
        scale_entry.pack(pady=5)

        # –í–∫–ª–∞–¥–∫–∞ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        auto_enter_frame = tk.Frame(notebook, bg="#1e1e1e")
        notebook.add(auto_enter_frame, text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
        tk.Label(auto_enter_frame, text="–ú–∏–Ω –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (—Å–µ–∫)", bg="#1e1e1e", fg="#fff").pack(pady=(10, 2))
        ae_min_var = tk.StringVar(value=str(self.auto_enter_min_delay))
        ae_min_entry = tk.Entry(auto_enter_frame, textvariable=ae_min_var)
        ae_min_entry.pack(pady=2)

        tk.Label(auto_enter_frame, text="–ú–∞–∫—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (—Å–µ–∫)", bg="#1e1e1e", fg="#fff").pack(pady=2)
        ae_max_var = tk.StringVar(value=str(self.auto_enter_max_delay))
        ae_max_entry = tk.Entry(auto_enter_frame, textvariable=ae_max_var)
        ae_max_entry.pack(pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
        tk.Label(auto_enter_frame, text="–ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ X (0.0-1.0, 0.5=—Ü–µ–Ω—Ç—Ä)", bg="#1e1e1e", fg="#fff").pack(pady=(10, 2))
        search_x_var = tk.StringVar(value=str(self.search_field_x))
        search_x_entry = tk.Entry(auto_enter_frame, textvariable=search_x_var, width=10)
        search_x_entry.pack(pady=2)
        
        tk.Label(auto_enter_frame, text="–ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ Y (0.0-1.0, 0.1=10% –æ—Ç –≤–µ—Ä—Ö–∞)", bg="#1e1e1e", fg="#fff").pack(pady=2)
        search_y_var = tk.StringVar(value=str(self.search_field_y))
        search_y_entry = tk.Entry(auto_enter_frame, textvariable=search_y_var, width=10)
        search_y_entry.pack(pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        def test_search_coordinates():
            try:
                if not self.window_var.get():
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–∫–Ω–æ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ!")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
                windows = gw.getWindowsWithTitle(self.window_var.get())
                if not windows:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û–∫–Ω–æ '{self.window_var.get()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                    return
                
                active_win = windows[0]
                window_rect = active_win._rect
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                search_x = window_rect.left + int(window_rect.width * float(search_x_var.get()))
                search_y = window_rect.top + int(window_rect.height * float(search_y_var.get()))
                
                # –ö–ª–∏–∫–∞–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–æ—á–∫—É
                if HAS_PYAUTOGUI:
                    pyautogui.click(search_x, search_y)
                    messagebox.showinfo("–¢–µ—Å—Ç", f"–ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ({search_x}, {search_y})\n\n–ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ–ø–∞–ª –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "pyautogui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
                    
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
        def get_mouse_position():
            try:
                if HAS_PYAUTOGUI:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
                    mouse_x, mouse_y = pyautogui.position()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
                    try:
                        import ctypes
                        from ctypes import wintypes
                        
                        # –ü–æ–ª—É—á–∞–µ–º handle –æ–∫–Ω–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
                        point = wintypes.POINT()
                        ctypes.windll.user32.GetCursorPos(ctypes.byref(point))
                        hwnd = ctypes.windll.user32.WindowFromPoint(point)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
                        window_title = ""
                        if hwnd:
                            length = ctypes.windll.user32.GetWindowTextLengthW(hwnd)
                            if length > 0:
                                buffer = ctypes.create_unicode_buffer(length + 1)
                                ctypes.windll.user32.GetWindowTextW(hwnd, buffer, length + 1)
                                window_title = buffer.value
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–∫–Ω–∞
                        rect = wintypes.RECT()
                        ctypes.windll.user32.GetWindowRect(hwnd, ctypes.byref(rect))
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        rel_x = (mouse_x - rect.left) / (rect.right - rect.left) if rect.right != rect.left else 0
                        rel_y = (mouse_y - rect.top) / (rect.bottom - rect.top) if rect.bottom != rect.top else 0
                        
                        message = f"""–ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: ({mouse_x}, {mouse_y})

–û–∫–Ω–æ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º: "{window_title}"
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–∫–Ω–∞: ({rect.left}, {rect.top}) - ({rect.right}, {rect.bottom})
–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {rect.right - rect.left} x {rect.bottom - rect.top}

–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ–∫–Ω–µ:
X: {rel_x:.3f} (0.0-1.0)
Y: {rel_y:.3f} (0.0-1.0)

–î–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!"""
                        
                    except Exception as e:
                        message = f"–ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: ({mouse_x}, {mouse_y})\n\n–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫–Ω–µ: {e}"
                    
                    messagebox.showinfo("–ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏", message)
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "pyautogui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏")
                    
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏: {e}")
        
        tk.Button(auto_enter_frame, text="üéØ –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", command=test_search_coordinates, 
                 bg="#555555", fg="#fff").pack(pady=5)
        
        tk.Button(auto_enter_frame, text="üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏", command=get_mouse_position, 
                 bg="#555555", fg="#fff").pack(pady=2)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        info_text = """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
‚Ä¢ –û–¥–∏–Ω —Ä–∞–∑ –∫–ª–∏–∫–∞–µ—Ç –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
‚Ä¢ –ó–∞—Ç–µ–º —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ Enter 3-5 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
‚Ä¢ –ò–∑–±–µ–≥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ü–µ–ª–µ–≤–æ–µ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–í–ê–ñ–ù–û: –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!"""
        tk.Label(auto_enter_frame, text=info_text, bg="#1e1e1e", fg="#ffff00", 
                justify=tk.LEFT, font=("Consolas", 9)).pack(pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ 5VITO
        # –í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞
        
        # –í–∫–ª–∞–¥–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        hotkeys_frame = tk.Frame(notebook, bg="#1e1e1e")
        notebook.add(hotkeys_frame, text="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
        
        # –°—Ç–∞—Ç—É—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ keyboard
        keyboard_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if HAS_KEYBOARD else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        tk.Label(hotkeys_frame, text=f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard: {keyboard_status}", 
                bg="#1e1e1e", fg="#00ff00" if HAS_KEYBOARD else "#ff0000").pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö
        hotkeys_info = """F8 - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è
F7 - –°–∫–∞–Ω–µ—Ä –ª–æ—Ç–æ–≤  
F6 - –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏
\\ - –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Å–Ω–æ–≤–Ω–∞—è)
F9 - –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞,
–≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å–µ."""
        tk.Label(hotkeys_frame, text=hotkeys_info, bg="#1e1e1e", fg="#ffffff", 
                justify=tk.LEFT, font=("Consolas", 10)).pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        tk.Button(hotkeys_frame, text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", 
                 command=self.reload_hotkeys, bg="#555555", fg="#fff").pack(pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ PayDay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        payday_frame = tk.Frame(notebook, bg="#1e1e1e")
        notebook.add(payday_frame, text="PayDay")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        payday_var = tk.BooleanVar(value=self.payday_notifications_enabled)
        payday_check = tk.Checkbutton(payday_frame, text="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay", 
                                     variable=payday_var, bg="#1e1e1e", fg="#fff", 
                                     selectcolor="#333333", activebackground="#1e1e1e")
        payday_check.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PayDay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
        payday_info = """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å –≤ 49 –º–∏–Ω—É—Ç.

‚ö†Ô∏è PAYDAY –ß–ï–†–ï–ó 11 –ú–ò–ù–£–¢! ‚ö†Ô∏è

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è:
‚Ä¢ –í –æ–≤–µ—Ä–ª–µ–µ (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç)
‚Ä¢ –í —Å–∏—Å—Ç–µ–º–Ω–æ–º –æ–∫–Ω–µ
‚Ä¢ –í –ª–æ–≥–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

–°–ª–µ–¥—É—é—â–∏–π PayDay –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π —á–∞—Å –≤ :00"""
        tk.Label(payday_frame, text=payday_info, bg="#1e1e1e", fg="#ffffff", 
                justify=tk.LEFT, font=("Consolas", 9)).pack(pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∞

        def save():
            try:
                self.overlay_alpha = float(alpha_var.get())
                self.overlay_refresh = float(interval_var.get())
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                min_d = float(ae_min_var.get())
                max_d = float(ae_max_var.get())
                if min_d <= 0 or max_d <= 0 or min_d > max_d:
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                self.auto_enter_min_delay = min_d
                self.auto_enter_max_delay = max_d
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
                search_x = float(search_x_var.get())
                search_y = float(search_y_var.get())
                if not (0.0 <= search_x <= 1.0) or not (0.0 <= search_y <= 1.0):
                    raise ValueError("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
                self.search_field_x = search_x
                self.search_field_y = search_y
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–æ
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PayDay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                self.payday_notifications_enabled = payday_var.get()
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                self.auto_scan_interval = int(auto_scan_interval_var.get())
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                self.settings['mobile_host'] = mobile_host_var.get()
                self.settings['mobile_port'] = int(mobile_port_var.get())
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OCR
                self.ocr_settings['contrast_factor'] = float(contrast_var.get())
                self.ocr_settings['sharpness_factor'] = float(sharpness_var.get())
                self.ocr_settings['min_confidence'] = int(confidence_var.get())
                self.ocr_settings['min_price'] = int(min_price_var.get())
                self.ocr_settings['max_price'] = int(max_price_var.get())
                self.ocr_settings['min_match_score'] = int(match_score_var.get())
                self.ocr_settings['image_scale_factor'] = float(scale_var.get())
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã
                
                bbox_text = bbox_var.get().strip()
                if bbox_text:
                    # –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏, –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
                    cleaned_text = bbox_text.replace('(', '').replace(')', '').replace('[', '').replace(']', '').strip()
                    parts = cleaned_text.split(",")
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
                    parts = [part.strip() for part in parts]
                    self.bbox = tuple(map(int, parts)) if parts else None
                else:
                    self.bbox = None
                # –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤ –æ–≤–µ—Ä–ª–µ–µ
                try:
                    self.overlay_window.set_alpha(self.overlay_alpha)
                except Exception:
                    pass
                self.save_settings()
                settings_win.destroy()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
                logger.exception("–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")

        tk.Button(settings_win, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save, bg="#333333", fg="#fff").pack(pady=10)

    def load_settings(self):
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º settings –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
            self.settings = {}
            
            if os.path.exists(SETTINGS_FILE):
                with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.overlay_alpha = data.get("overlay_alpha", 0.8)
                    self.overlay_refresh = data.get("overlay_refresh", 1.0)
                    self.bbox = data.get("bbox")
                    self.ocr_enabled = data.get("ocr_enabled", True)
                    self.overlays_enabled = data.get("overlays_enabled", True)
                    self.overlay_geometry = data.get("overlay_geometry", "350x650+100+100")
                    self.ui_config = data.get("ui_config", {})
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    self.settings['mobile_host'] = data.get("mobile_host", "0.0.0.0")
                    self.settings['mobile_port'] = data.get("mobile_port", 5000)
                    pr = data.get("page_refresh", {})
                    try:
                        self.auto_enter_min_delay = float(pr.get("min_delay", self.auto_enter_min_delay))
                        self.auto_enter_max_delay = float(pr.get("max_delay", self.auto_enter_max_delay))
                        self.search_field_x = float(pr.get("search_field_x", self.search_field_x))
                        self.search_field_y = float(pr.get("search_field_y", self.search_field_y))
                    except Exception:
                        pass
                        
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞
                        
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PayDay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    self.payday_notifications_enabled = data.get("payday_notifications_enabled", True)
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.auto_scan_interval = data.get("auto_scan_interval", 2000)
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OCR
                    ocr_settings = data.get("ocr_settings", {})
                    self.ocr_settings.update({
                        'contrast_factor': ocr_settings.get('contrast_factor', 1.5),
                        'sharpness_factor': ocr_settings.get('sharpness_factor', 2.0),
                        'min_confidence': ocr_settings.get('min_confidence', 30),
                        'min_price': ocr_settings.get('min_price', 1),
                        'max_price': ocr_settings.get('max_price', 1000000),
                        'min_match_score': ocr_settings.get('min_match_score', 70),
                        'image_scale_factor': ocr_settings.get('image_scale_factor', 1.2)
                    })
                        
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∞
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.settings['mobile_host'] = "0.0.0.0"
                self.settings['mobile_port'] = 8080
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.settings = {
                'mobile_host': "0.0.0.0",
                'mobile_port': 8080
            }

    def save_settings(self):
        try:
            data = {
                "overlay_alpha": self.overlay_alpha,
                "overlay_refresh": self.overlay_refresh,
                "bbox": self.bbox,
                "ocr_enabled": self.ocr_enabled,
                "overlays_enabled": self.overlays_enabled,
                "overlay_geometry": self.overlay_window.get_geometry() if hasattr(self, 'overlay_window') else self.overlay_geometry,
                "ui_config": self.ui_config,
                "page_refresh": {
                    "min_delay": self.auto_enter_min_delay,
                    "max_delay": self.auto_enter_max_delay,
                    "search_field_x": self.search_field_x,
                    "search_field_y": self.search_field_y
                },
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã
                "payday_notifications_enabled": self.payday_notifications_enabled,
                "auto_scan_interval": self.auto_scan_interval,
                "ocr_settings": self.ocr_settings,
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                "mobile_host": self.settings.get('mobile_host', '0.0.0.0'),
                "mobile_port": self.settings.get('mobile_port', 5000),
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã
            }
            with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    def load_items(self):
        self.items_data = []
        if os.path.exists(ITEMS_FILE):
            try:
                with open(ITEMS_FILE, 'r', encoding='utf-8') as f:
                    reader = csv.reader(f)
                    for row in reader:
                        if len(row) >= 7:  # –ú–∏–Ω–∏–º—É–º 7 –ø–æ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
                            # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                            if len(row) == 7:
                                row.insert(1, "")  # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                            # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º "0"
                            if len(row) == 8:
                                row.append("0")  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å
                            self.tree.insert("", tk.END, values=row)
                            self.items_data.append(row)
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")

    def save_items(self):
        try:
            with open(ITEMS_FILE, 'w', encoding='utf-8', newline='') as f:
                writer = csv.writer(f)
                for child in self.tree.get_children():
                    writer.writerow(self.tree.item(child)["values"])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º items_data –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.items_data = []
            for child in self.tree.get_children():
                self.items_data.append(self.tree.item(child)["values"])
                
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–æ—Ç–æ–º —É–¥–∞–ª–µ–Ω–∞
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ú–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ get_items_for_bot —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ get_items_from_file_for_bot —É–¥–∞–ª–µ–Ω
    
    def update_item(self, item_name: str, item_data: dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≤ –¥–µ—Ä–µ–≤–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, 'tree') and self.tree:
                for child in self.tree.get_children():
                    values = self.tree.item(child)["values"]
                    if len(values) >= 7 and values[0] == item_name:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                        new_values = list(values)
                        new_values[2] = str(item_data.get('buy_price', 0))  # –ü–æ–∫—É–ø–∫–∞
                        new_values[3] = str(item_data.get('sell_price', 0))  # –ü—Ä–æ–¥–∞–∂–∞
                        new_values[4] = str(item_data.get('repair', 0))  # –†–µ–º–æ–Ω—Ç
                        new_values[5] = str(item_data.get('tax', 0))  # –ù–∞–ª–æ–≥
                        new_values[6] = str(item_data.get('avg_price', 0))  # –°—Ä–µ–¥–Ω—è—è
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –¥–µ—Ä–µ–≤–µ
                        self.tree.item(child, values=new_values)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        self.save_items()
                        
                        logger.info(f"‚úÖ –¢–æ–≤–∞—Ä {item_name} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –¥–µ—Ä–µ–≤–µ –∏ —Ñ–∞–π–ª–µ")
                        return True
            
            # –ï—Å–ª–∏ –¥–µ—Ä–µ–≤–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä {item_name} —á–µ—Ä–µ–∑ —Ñ–∞–π–ª")
            return self.update_item_in_file(item_name, item_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {item_name}: {e}")
            return False
    
    def update_item_in_file(self, item_name: str, item_data: dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–∞–π–ª–µ"""
        try:
            import csv
            import os
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
            items = []
            if os.path.exists(ITEMS_FILE):
                with open(ITEMS_FILE, 'r', encoding='utf-8') as csvfile:
                    reader = csv.reader(csvfile)
                    items = list(reader)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            item_updated = False
            for i, existing_item in enumerate(items):
                if len(existing_item) >= 7 and existing_item[0].strip() == item_name:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                    items[i][2] = str(item_data.get('buy_price', 0))  # –ü–æ–∫—É–ø–∫–∞
                    items[i][3] = str(item_data.get('sell_price', 0))  # –ü—Ä–æ–¥–∞–∂–∞
                    items[i][4] = str(item_data.get('repair', 0))  # –†–µ–º–æ–Ω—Ç
                    items[i][5] = str(item_data.get('tax', 0))  # –ù–∞–ª–æ–≥
                    items[i][6] = str(item_data.get('avg_price', 0))  # –°—Ä–µ–¥–Ω—è—è
                    item_updated = True
                    break
            
            if not item_updated:
                logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä {item_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            with open(ITEMS_FILE, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerows(items)
            
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä {item_name} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º items_data –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, 'items_data'):
                self.items_data = []
                for child in self.tree.get_children():
                    self.items_data.append(self.tree.item(child)["values"])
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–∞–π–ª–µ {item_name}: {e}")
            return False

    def load_deals(self):
        self.history = []
        if os.path.exists(DEAL_FILE):
            try:
                with open(DEAL_FILE, 'r', encoding='utf-8') as f:
                    reader = csv.reader(f)
                    for row in reader:
                        if len(row) >= 4:
                            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 –∑–Ω–∞—á–µ–Ω–∏—è (–¥–∞—Ç–∞, —Ç–∏–ø, —Ü–µ–Ω–∞, —Ç–æ–≤–∞—Ä)
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ
                            try:
                                price = float(row[2])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫/–∫–∫
                                formatted_price = self._convert_number_format(price)
                                self.history_tree.insert("", tk.END, values=(row[0], row[1], formatted_price, row[3]))
                                self.history.append((row[0], row[1], price, row[3]))
                            except (ValueError, IndexError):
                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                continue
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π —É–¥–∞–ª–µ–Ω–∞
                self.update_stats()
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫")

    def save_deals(self):
        try:
            with open(DEAL_FILE, 'w', encoding='utf-8', newline='') as f:
                writer = csv.writer(f)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ self.history (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã)
                for record in self.history:
                    if len(record) >= 4:
                        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è - —Å—Ç—Ä–æ–∫–∏
                        row = [str(value) for value in record]
                        writer.writerow(row)
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.history)} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫")

    # ---------------- –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–†–ê–ù–ò–¶–´ ----------------
    def toggle_page_refresh(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–ª–∞–≤–∏—à–∏ \\ (backslash) –∏–ª–∏ F9."""
        try:
            self.page_refresh_enabled = not self.page_refresh_enabled
            if self.page_refresh_enabled:
                logger.info("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –í–ö–õ")
                self.auto_enter_status_var.set("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–∫–ª")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ keyboard –¥–æ—Å—Ç—É–ø–µ–Ω
                if not HAS_KEYBOARD:
                    logger.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –æ–∫–Ω–æ
                if not self.window_var.get():
                    logger.warning("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –æ–∫–Ω–æ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–ª–∏–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
                self.search_field_clicked = False
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–≤–µ—Ä–ª–µ–µ
                if hasattr(self, 'overlay_window'):
                    self.overlay_window.update_auto_enter_status(True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if not self.page_refresh_thread or not self.page_refresh_thread.is_alive():
                    self.page_refresh_thread = threading.Thread(target=self._page_refresh_loop, daemon=True, name="PageRefreshThread")
                    self.page_refresh_thread.start()
                    logger.info("‚úÖ –ü–æ—Ç–æ–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
                else:
                    logger.info("‚úÖ –ü–æ—Ç–æ–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ (–±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞)
                logger.info("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –í–ö–õ–Æ–ß–ï–ù–û! –ù–∞–∂–º–∏—Ç–µ \\ –∏–ª–∏ F9 –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è")
                    
            else:
                logger.info("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –í–´–ö–õ")
                self.auto_enter_status_var.set("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í—ã–∫–ª")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–ª–∏–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
                self.search_field_clicked = False
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–≤–µ—Ä–ª–µ–µ
                if hasattr(self, 'overlay_window'):
                    self.overlay_window.update_auto_enter_status(False)
                    
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ (–±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞)
                logger.info("‚ùå –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –í–´–ö–õ–Æ–ß–ï–ù–û! –ù–∞–∂–º–∏—Ç–µ \\ –∏–ª–∏ F9 –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{str(e)}")

    # –§—É–Ω–∫—Ü–∏—è toggle_auto_buy —É–¥–∞–ª–µ–Ω–∞
        
    def _page_refresh_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é, –ø–æ–∫–∞ –Ω–µ –≤—ã–∫–ª—é—á–∞—Ç."""
        if not HAS_KEYBOARD:
            logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            self.page_refresh_enabled = False
            return
            
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø–∞—É–∑
        action_count = 0
        
        while self.running and self.page_refresh_enabled:
            try:
                # –ê–∫—Ç–∏–≤–Ω–æ –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ –∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –Ω–∞—à GUI
                active_win = None
                try:
                    active_win = gw.getActiveWindow()
                except Exception:
                    pass

                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                try:
                    app_has_focus = self.root.focus_get() is not None
                except Exception:
                    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ
                    app_has_focus = False
                target_ok = True

                if self.window_var.get():
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                    target_ok = active_win and self.window_var.get() in (active_win.title or "")

                if not app_has_focus and target_ok:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π
                    action_count += 1
                    
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–∫–∞–∂–¥—ã–µ 10-30 –¥–µ–π—Å—Ç–≤–∏–π)
                    if action_count % random.randint(10, 30) == 0:
                        long_pause = random.uniform(3.0, 10.0)  # 3-10 —Å–µ–∫—É–Ω–¥ –ø–∞—É–∑—ã
                        logger.debug(f"–î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞: {long_pause:.1f}—Å (–¥–µ–π—Å—Ç–≤–∏–µ #{action_count})")
                        time.sleep(long_pause)
                        continue
                    
                    # –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—É–∑—ã (–∫–∞–∂–¥—ã–µ 3-8 –¥–µ–π—Å—Ç–≤–∏–π)
                    if action_count % random.randint(3, 8) == 0:
                        short_pause = random.uniform(1.0, 3.0)  # 1-3 —Å–µ–∫—É–Ω–¥—ã
                        logger.debug(f"–ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞: {short_pause:.1f}—Å (–¥–µ–π—Å—Ç–≤–∏–µ #{action_count})")
                        time.sleep(short_pause)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    time.sleep(random.uniform(0.1, 0.3))
                    self._refresh_page()
                    
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                time.sleep(0.5)
                
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ç–µ–º–ø —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            delay = random.uniform(self.auto_enter_min_delay, self.auto_enter_max_delay)
            time.sleep(delay)

    def _refresh_page(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–∫–Ω–µ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ + Enter."""
        try:
            if HAS_PYAUTOGUI:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
                active_win = gw.getActiveWindow()
                if active_win:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–∫–Ω–∞
                    window_rect = active_win._rect
                    
                    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
                    search_x = window_rect.left + int(window_rect.width * self.search_field_x)
                    search_y = window_rect.top + int(window_rect.height * self.search_field_y)
                    
                    # –ö–ª–∏–∫–∞–µ–º –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                    if not self.search_field_clicked:
                        pyautogui.click(search_x, search_y)
                        time.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è
                        self.search_field_clicked = True
                        logger.debug(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞: –∫–ª–∏–∫ –≤ ({search_x}, {search_y})")
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ Enter –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
                    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
                    self._simulate_enter_press()
                    logger.debug("–°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    
            else:
                # –ï—Å–ª–∏ pyautogui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                if not self.search_field_clicked:
                    keyboard.send("tab")  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—é –ø–æ–∏—Å–∫–∞
                    time.sleep(0.1)
                    self.search_field_clicked = True
                    logger.debug("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞: Tab")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º Enter
                self._simulate_enter_press()
                logger.debug("–°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è Enter")
                    
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            # Fallback - –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            try:
                keyboard.send("f5")
                logger.debug("Fallback: F5")
            except:
                pass
    
    def _simulate_enter_press(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ Enter –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏."""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞–ø—Ä—è–º—É—é –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
            if self._send_enter_to_active_window():
                logger.debug("Enter –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Windows API")
                return
            
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º pyautogui –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            if HAS_PYAUTOGUI:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
                active_win = gw.getActiveWindow()
                if active_win:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Enter —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ –æ–∫–Ω–æ
                    pyautogui.press('enter')
                    time.sleep(0.05)
                    logger.debug("Enter –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pyautogui")
                    return
            
            # Fallback: –æ–±—ã—á–Ω—ã–π keyboard.send
            keyboard.send("enter")
            time.sleep(0.05)
            logger.debug("Enter –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ keyboard")
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ Enter: {e}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
            try:
                keyboard.send("enter")
            except:
                pass
    
    def _send_enter_to_active_window(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Enter –Ω–∞–ø—Ä—è–º—É—é –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ Windows API."""
        try:
            import ctypes
            from ctypes import wintypes
            
            # –ü–æ–ª—É—á–∞–µ–º handle –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            hwnd = ctypes.windll.user32.GetForegroundWindow()
            if hwnd == 0:
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ WM_KEYDOWN –¥–ª—è Enter (VK_RETURN = 0x0D)
            VK_RETURN = 0x0D
            WM_KEYDOWN = 0x0100
            WM_KEYUP = 0x0101
            
            # –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏
            ctypes.windll.user32.PostMessageW(hwnd, WM_KEYDOWN, VK_RETURN, 0)
            time.sleep(0.01)
            # –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏
            ctypes.windll.user32.PostMessageW(hwnd, WM_KEYUP, VK_RETURN, 0)
            
            return True
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ Windows API: {e}")
            return False

    def get_mouse_position(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º."""
        try:
            if HAS_PYAUTOGUI:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
                mouse_x, mouse_y = pyautogui.position()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
                try:
                    import ctypes
                    from ctypes import wintypes
                    
                    # –ü–æ–ª—É—á–∞–µ–º handle –æ–∫–Ω–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
                    point = wintypes.POINT()
                    ctypes.windll.user32.GetCursorPos(ctypes.byref(point))
                    hwnd = ctypes.windll.user32.WindowFromPoint(point)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
                    window_title = ""
                    if hwnd:
                        length = ctypes.windll.user32.GetWindowTextLengthW(hwnd)
                        if length > 0:
                            buffer = ctypes.create_unicode_buffer(length + 1)
                            ctypes.windll.user32.GetWindowTextW(hwnd, buffer, length + 1)
                            window_title = buffer.value
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–∫–Ω–∞
                    rect = wintypes.RECT()
                    ctypes.windll.user32.GetWindowRect(hwnd, ctypes.byref(rect))
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    rel_x = (mouse_x - rect.left) / (rect.right - rect.left) if rect.right != rect.left else 0
                    rel_y = (mouse_y - rect.top) / (rect.bottom - rect.top) if rect.bottom != rect.top else 0
                    
                    message = f"""üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: ({mouse_x}, {mouse_y})

ü™ü –û–∫–Ω–æ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º: "{window_title}"
üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–∫–Ω–∞: ({rect.left}, {rect.top}) - ({rect.right}, {rect.bottom})
üìè –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {rect.right - rect.left} x {rect.bottom - rect.top}

üéØ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ–∫–Ω–µ:
X: {rel_x:.3f} (0.0-1.0)
Y: {rel_y:.3f} (0.0-1.0)

üí° –î–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!"""
                    
                except Exception as e:
                    message = f"üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: ({mouse_x}, {mouse_y})\n\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫–Ω–µ: {e}"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–≤–µ—Ä–ª–µ–µ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
                if hasattr(self, 'overlay_window') and self.overlay_window.visible:
                    self.overlay_window.show_notification(f"–ú—ã—à—å: ({mouse_x}, {mouse_y})", "#00ff00", 3000)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                import tkinter.messagebox as mb
                mb.showinfo("–ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏", message)
                
                logger.info(f"–ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: ({mouse_x}, {mouse_y})")
                
            else:
                import tkinter.messagebox as mb
                mb.showerror("–û—à–∏–±–∫–∞", "pyautogui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏: {e}")
            import tkinter.messagebox as mb
            mb.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏: {e}")

    def export_items_csv(self):
        filename = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv")])
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8', newline='') as f:
                    writer = csv.writer(f)
                    writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ü–æ–∫—É–ø–∫–∞", "–ü—Ä–æ–¥–∞–∂–∞", "–†–µ–º–æ–Ω—Ç", "–ù–∞–ª–æ–≥", "–°—Ä–µ–¥–Ω—è—è", "–ü—Ä–∏–±—ã–ª—å"])
                    for child in self.tree.get_children():
                        writer.writerow(self.tree.item(child)["values"])
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")

    def _convert_number_format(self, number):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∏—Å–µ–ª –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 = 1–∫, 1000000 = 1–∫–∫)"""
        try:
            if isinstance(number, str):
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                number = float(number.replace(' ', '').replace(',', ''))
            
            if not isinstance(number, (int, float)):
                return str(number)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if number >= 1000000:
                # 1,000,000 = 1–∫–∫
                result = number / 1000000
                if result.is_integer():
                    return f"{int(result)}–∫–∫"
                else:
                    return f"{result:.1f}–∫–∫".replace('.', ',')
            elif number >= 1000:
                # 1,000 = 1–∫
                result = number / 1000
                if result.is_integer():
                    return f"{int(result)}–∫"
                else:
                    return f"{result:.1f}–∫".replace('.', ',')
            else:
                # –ú–µ–Ω—å—à–µ 1000 –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                return str(int(number))
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∏—Å–ª–∞ '{number}' –≤ —Ñ–æ—Ä–º–∞—Ç –∫/–∫–∫: {e}")
            return str(number)

    def _parse_transaction_date(self, date_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ 'DD/MM HH:MM'"""
        try:
            if not date_str or not date_str.strip():
                return None
                
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            date_str = date_str.strip()
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∞—Ç—ã: DD/MM HH:MM
            date_match = re.match(r'(\d{2})/(\d{2})\s+(\d{2}):(\d{2})', date_str)
            if date_match:
                day, month, hour, minute = map(int, date_match.groups())
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                current_year = datetime.now().year
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã
                transaction_date = datetime(current_year, month, day, hour, minute)
                
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                if transaction_date > datetime.now():
                    transaction_date = datetime(current_year - 1, month, day, hour, minute)
                
                return transaction_date.strftime("%Y-%m-%d %H:%M:%S")
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}")
            return None

    def on_close(self):
        self.running = False
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.hotkeys_monitor_enabled = False
        # –ì–∞—Å–∏–º –∞–≤—Ç–æ—Å–ø–∞–º Enter
        self.auto_enter_enabled = False
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç
        self.auto_import_running = False
        
        # –î–∞–µ–º –ø–æ—Ç–æ–∫–∞–º —à–∞–Ω—Å –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        try:
            if self.auto_enter_thread and self.auto_enter_thread.is_alive():
                self.auto_enter_thread.join(timeout=0.5)
        except Exception:
            pass
            
        try:
            if self.auto_import_thread and self.auto_import_thread.is_alive():
                self.auto_import_thread.join(timeout=0.5)
        except Exception:
            pass
            
        if hasattr(self, 'overlay_window'):
            self.overlay_window.destroy()
        
        # –û—á–∏—â–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        if HAS_KEYBOARD:
            try:
                keyboard.unhook_all()
                logger.info("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        self.save_settings()
        self.save_deals()
        self.save_items()
        self.root.destroy()
    
    def get_safety_recommendations(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        return {
            "ocr_safety": [
                "‚úÖ OCR —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤–∏–¥–∏–º—ã–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ",
                "‚úÖ –ù–µ —á–∏—Ç–∞–µ—Ç –ø–∞–º—è—Ç—å –∏–≥—Ä—ã –Ω–∞–ø—Ä—è–º—É—é",
                "‚úÖ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –∞–Ω—Ç–∏—á–∏—Ç–∞",
                "‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 24/7 - –¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã",
                "‚ö†Ô∏è –ò–º–∏—Ç–∏—Ä—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞"
            ],
            "auto_enter_safety": [
                "‚úÖ –ò–º–∏—Ç–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫",
                "‚úÖ –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ø–∞—É–∑—ã",
                "‚úÖ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –æ–∫–Ω–∞",
                "‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –ø–æ–¥—Ä—è–¥",
                "‚ö†Ô∏è –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 30-60 –º–∏–Ω—É—Ç"
            ],
            "general_safety": [
                "üö´ –ù–ï —á–∏—Ç–∞–π—Ç–µ –ø–∞–º—è—Ç—å –∏–≥—Ä—ã –Ω–∞–ø—Ä—è–º—É—é",
                "üö´ –ù–ï –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –∏–≥—Ä—ã",
                "üö´ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DLL injection",
                "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ OCR –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é",
                "‚úÖ –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –≤ —Ä–∞–±–æ—Ç–µ",
                "‚úÖ –ò–º–∏—Ç–∏—Ä—É–π—Ç–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
            ]
        }

    # ================= –ú–û–ë–ò–õ–¨–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° =================
    def start_mobile_interface(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–±–∏–ª—å–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            if not self.mobile_interface_enabled:
                logger.info("üì± –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return
                
            logger.info("üì± –ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Flask –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                import flask
                logger.info(f"‚úÖ Flask –≤–µ—Ä—Å–∏—è: {flask.__version__}")
            except ImportError as e:
                logger.error(f"‚ùå Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", "Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flask –∫–æ–º–∞–Ω–¥–æ–π:\npip install flask")
                return
            
            self.mobile_interface = MobileInterface(self)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            mobile_host = self.settings.get('mobile_host', '0.0.0.0')
            mobile_port = self.settings.get('mobile_port', 5000)
            
            logger.info(f"üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {mobile_host}:{mobile_port}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            try:
                result = sock.connect_ex((mobile_host, mobile_port))
                if result == 0:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Ä—Ç {mobile_port} —É–∂–µ –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç")
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
                    for port in range(mobile_port + 1, mobile_port + 10):
                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        result = sock.connect_ex((mobile_host, port))
                        if result != 0:
                            mobile_port = port
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: {port}")
                            break
                        sock.close()
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç")
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {mobile_port}-{mobile_port + 9}")
                        return
                sock.close()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.mobile_interface_thread = threading.Thread(
                target=lambda: self.mobile_interface.run(host=mobile_host, port=mobile_port, debug=False),
                daemon=True,
                name="MobileInterface"
            )
            self.mobile_interface_thread.start()
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self.mobile_interface_thread.is_alive():
                logger.info(f"üåê –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ {mobile_host}:{mobile_port}")
                
                # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    import socket
                    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                    s.connect(("8.8.8.8", 80))
                    local_ip = s.getsockname()[0]
                    s.close()
                    
                    url = f"http://{local_ip}:{mobile_port}"
                    logger.info(f"üì± URL –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {url}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å URL
                    messagebox.showinfo("–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", 
                        f"–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω!\n\n"
                        f"URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:\n{url}\n\n"
                        f"–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
                        
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å: {e}")
                    messagebox.showinfo("–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", 
                        f"–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {mobile_port}!\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n{str(e)}")
    
    def add_mobile_deal(self, deal):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            print(f"üì± –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {deal}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if not deal or 'name' not in deal or 'price' not in deal or 'type' not in deal:
                print(f"‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {deal}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –æ–±—ã—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            # –§–æ—Ä–º–∞—Ç: (–¥–∞—Ç–∞, —Ç–∏–ø, —Ü–µ–Ω–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, ID)
            history_record = (
                deal.get('date', datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
                deal['type'],
                float(deal['price']),
                deal['name'],
                deal.get('id', int(time.time() * 1000))  # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
            )
            
            print(f"üì± –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏: {history_record}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.history.append(history_record)
            print(f"üì± –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.history)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.save_deals()
            print(f"üì± –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self.update_total_profit)
            self.root.after(0, self._update_history_display)
            print(f"üì± GUI –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            logger.info(f"üì± –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {deal['name']} - ${deal['price']}")
            print(f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {deal['name']} - ${deal['price']} ({deal['type']})")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def _update_history_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –≤ GUI"""
        try:
            if hasattr(self, 'history_tree'):
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                for item in self.history_tree.get_children():
                    self.history_tree.delete(item)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                for record in self.history:
                    if len(record) >= 4:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        try:
                            price = float(record[2]) if isinstance(record[2], (int, float)) else float(record[2])
                            formatted_price = self._convert_number_format(price)
                            self.history_tree.insert("", tk.END, values=(record[0], record[1], formatted_price, record[3]))
                        except (ValueError, IndexError) as e:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ {record}: {e}")
                            self.history_tree.insert("", tk.END, values=record[:4])
                
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.history)} –∑–∞–ø–∏—Å–µ–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def remove_mobile_deal(self, deal_id):
        """–£–¥–∞–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ ID"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ —Å ID: {deal_id}")
            print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.history)}")
            
            # –ò—â–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ ID
            removed = False
            removed_records = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            for i in range(len(self.history) - 1, -1, -1):
                record = self.history[i]
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å {i}: {record}")
                
                if len(record) >= 4:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –≤ 5-–º –ø–æ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if len(record) > 4 and str(record[4]) == str(deal_id):
                        removed_record = self.history.pop(i)
                        removed_records.append(removed_record)
                        removed = True
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID {deal_id}: {removed_record}")
                        break
            
            if removed:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                self.save_deals()
                print(f"üì± –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º GUI
                self.root.after(0, self.update_total_profit)
                self.root.after(0, self._update_history_display)
                print(f"üì± GUI –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
                
                logger.info(f"üì± –£–¥–∞–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ID {deal_id}")
                print(f"‚úÖ –°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ID {deal_id}")
                return True
            else:
                logger.warning(f"üì± –°–¥–µ–ª–∫–∞ —Å ID {deal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
                print(f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ —Å ID {deal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def get_all_deals_for_mobile(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            deals = []
            for record in self.history:
                if len(record) >= 4:
                    deal = {
                        'id': record[4] if len(record) > 4 else int(time.time() * 1000),
                        'name': record[3],
                        'price': float(record[2]),
                        'quantity': 1,
                        'type': record[1],
                        'date': record[0],
                        'source': 'main'
                    }
                    deals.append(deal)
            return deals
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return []
    
    def clean_phantom_deals(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã"""
        try:
            print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫...")
            original_count = len(self.history)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–∞—Ç–∞+—Ç–∏–ø+—Ü–µ–Ω–∞+–Ω–∞–∑–≤–∞–Ω–∏–µ
            seen_deals = set()
            cleaned_history = []
            
            for record in self.history:
                if len(record) >= 4:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    deal_key = (record[0], record[1], str(record[2]), record[3])
                    
                    if deal_key not in seen_deals:
                        seen_deals.add(deal_key)
                        cleaned_history.append(record)
                    else:
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {record}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.history = cleaned_history
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.save_deals()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º GUI
            self.root.after(0, self.update_total_profit)
            self.root.after(0, self._update_history_display)
            
            removed_count = original_count - len(self.history)
            print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {removed_count} —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö/–¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π")
            logger.info(f"–û—á–∏—â–µ–Ω–æ {removed_count} —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö/–¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π")
            
            if removed_count > 0:
                messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", f"–£–¥–∞–ª–µ–Ω–æ {removed_count} —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö/–¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π")
            else:
                messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–§–∞–Ω—Ç–æ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n{str(e)}")
    
    def sync_with_mobile_interface(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –º–æ–±–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        try:
            if not self.mobile_interface_enabled or not self.mobile_interface:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –≤ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            mobile_deals = []
            for record in self.history:
                if len(record) >= 4:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–¥–µ–ª–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    deal = {
                        'id': record[4] if len(record) > 4 else int(time.time() * 1000),
                        'name': record[3],
                        'price': float(record[2]),
                        'quantity': 1,
                        'type': record[1],
                        'date': record[0],
                        'source': 'main_app'
                    }
                    mobile_deals.append(deal)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª
            self.mobile_interface.save_deals(mobile_deals)
            
            logger.info(f"üì± –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(mobile_deals)} —Å–¥–µ–ª–æ–∫ —Å –º–æ–±–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")
            print(f"üì± –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(mobile_deals)} —Å–¥–µ–ª–æ–∫")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –º–æ–±–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    def get_all_deals_for_mobile(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            deals = []
            for record in self.history:
                if len(record) >= 4:
                    deal = {
                        'id': record[4] if len(record) > 4 else int(time.time() * 1000),
                        'name': record[3],
                        'price': float(record[2]),
                        'quantity': 1,
                        'type': record[1],
                        'date': record[0],
                        'source': 'main_app'
                    }
                    deals.append(deal)
            return deals
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return []
    
    def get_items_for_mobile(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            items = []
            for child in self.tree.get_children():
                values = self.tree.item(child)["values"]
                if len(values) >= 7:
                    try:
                        item = {
                            'name': values[0],  # –ù–∞–∑–≤–∞–Ω–∏–µ
                            'buy_price': self._safe_float(values[1]),  # –ü–æ–∫—É–ø–∫–∞
                            'sell_price': self._safe_float(values[2]),  # –ü—Ä–æ–¥–∞–∂–∞
                            'repair': self._safe_float(values[3]),  # –†–µ–º–æ–Ω—Ç
                            'tax': self._safe_float(values[4]),  # –ù–∞–ª–æ–≥
                            'avg_price': self._safe_float(values[5]),  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                            'profit': self._safe_float(values[6]),  # –ü—Ä–∏–±—ã–ª—å
                            'comment': values[7] if len(values) > 7 and values[7] else ''  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        }
                        items.append(item)
                    except Exception as item_error:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {values[0]}: {item_error}")
                        continue
            return items
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return []
    
    def _safe_float(self, value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        try:
            if not value or value == '':
                return 0.0
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
            clean_value = str(value).strip().replace(',', '.')
            return float(clean_value)
        except (ValueError, TypeError):
            return 0.0
    
    def get_all_deals_for_mobile(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            deals = []
            for deal in self.history:
                if len(deal) >= 4:
                    dt, typ, price, name = deal[:4]
                    deals.append({
                        'date': dt,
                        'type': '–ü—Ä–æ–¥–∞–∂–∞' if typ == 'sell' else '–ü–æ–∫—É–ø–∫–∞',
                        'price': self._safe_float(price),
                        'name': name
                    })
            return deals
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return []
    
    def delete_deal_from_mobile(self, deal_id):
        """–£–¥–∞–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–¥–µ–ª–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            deleted_deal = self.history.pop(deal_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.save_deals()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_stats()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            self._update_history_display()
            
            logger.info(f"–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {deal_id} - {deleted_deal}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            raise
    
    def update_deal_in_mobile(self, deal_id, deal_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –≤ –º–æ–±–∏–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø —Å–¥–µ–ª–∫–∏
            deal_type = 'sell' if deal_data.get('type') == '–ü—Ä–æ–¥–∞–∂–∞' else 'buy'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏–∏
            self.history[deal_id] = [
                deal_data.get('date', ''),
                deal_type,
                str(deal_data.get('price', 0)),
                deal_data.get('name', '')
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.save_deals()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_stats()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            self._update_history_display()
            
            logger.info(f"–°–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {deal_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {e}")
            raise
    
    def add_deal_from_mobile(self, deal):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø —Å–¥–µ–ª–∫–∏
            deal_type = 'sell' if deal['type'] == '–ü—Ä–æ–¥–∞–∂–∞' else 'buy'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            deal_record = [timestamp, deal_type, str(deal['price']), deal['name']]
            self.history.append(deal_record)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.save_deals()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_stats()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            self._update_history_display()
            
            logger.info(f"–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {deal}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            raise
    
    def toggle_mobile_interface(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            if self.mobile_interface_enabled:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                if self.mobile_interface:
                    # Flask —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞
                    self.mobile_interface = None
                self.mobile_interface_enabled = False
                logger.info("üì± –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–∫–ª—é—á–µ–Ω")
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º
                self.mobile_interface_enabled = True
                self.start_mobile_interface()
                logger.info("üì± –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω")
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª—é—á–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
    
    def get_mobile_interface_url(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            import socket
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            port = self.settings.get('mobile_port', 5000)
            url = f"http://{local_ip}:{port}"
            logger.info(f"üì± URL –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {url}")
            return url
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å: {e}")
            port = self.settings.get('mobile_port', 5000)
            return f"http://localhost:{port}"
    
    def setup_mobile_access(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        try:
            import subprocess
            import os
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            script_path = os.path.join(os.path.dirname(__file__), "setup_external_access.py")
            if os.path.exists(script_path):
                subprocess.Popen([sys.executable, script_path], shell=True)
            else:
                # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                self.show_mobile_setup_instructions()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {e}")
            self.show_mobile_setup_instructions()
    
    def show_mobile_setup_instructions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            import socket
            from tkinter import messagebox
            
            # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å–∞
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s.connect(("8.8.8.8", 80))
                local_ip = s.getsockname()[0]
                s.close()
            except:
                local_ip = "127.0.0.1"
            
            port = self.settings.get('mobile_port', 5000)
            
            instructions = f"""üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É

üì± –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:{port}
‚Ä¢ –í —Å–µ—Ç–∏: http://{local_ip}:{port}

üîß –î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ
2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç {port} –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ Windows
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ:
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ú–æ–±–∏–ª—å–Ω—ã–π
‚Ä¢ –•–æ—Å—Ç: 0.0.0.0 (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
‚Ä¢ –ü–æ—Ä—Ç: {port}

‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é!"""
            
            messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞", instructions)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
    
    def test_mobile_interface(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Flask –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                import flask
                logger.info(f"‚úÖ Flask –≤–µ—Ä—Å–∏—è: {flask.__version__}")
            except ImportError as e:
                logger.error(f"‚ùå Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", "Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flask –∫–æ–º–∞–Ω–¥–æ–π:\npip install flask")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª—é—á–µ–Ω
            if not self.mobile_interface_enabled:
                logger.warning("‚ö†Ô∏è –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–∫–ª—é—á–µ–Ω")
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–∫–ª—é—á–µ–Ω!\n\n–í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω
            if not hasattr(self, 'mobile_interface_thread') or not self.mobile_interface_thread.is_alive():
                logger.warning("‚ö†Ô∏è –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º URL
            url = self.get_mobile_interface_url()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                import urllib.request
                import urllib.error
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                response = urllib.request.urlopen(url, timeout=5)
                if response.getcode() == 200:
                    logger.info(f"‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {url}")
                    messagebox.showinfo("–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω", 
                        f"‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
                        f"URL: {url}\n\n"
                        f"–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
                else:
                    logger.warning(f"‚ö†Ô∏è –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.getcode()}")
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                        f"–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.getcode()}\n\n"
                        f"URL: {url}")
                        
            except urllib.error.URLError as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", 
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É!\n\n"
                    f"URL: {url}\n\n"
                    f"–û—à–∏–±–∫–∞: {e}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    f"‚Ä¢ –ó–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
                    f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ—Ä—Ç\n"
                    f"‚Ä¢ –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n{str(e)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n{str(e)}")

    def show_qr_code(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            if not self.mobile_interface_enabled:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º URL –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            url = self.get_mobile_interface_url()
            
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ QR-–∫–æ–¥–∞
            self.create_qr_window(url)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ QR-–∫–æ–¥–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥: {e}")
    
    def create_qr_window(self, url):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ —Å QR-–∫–æ–¥–æ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
            qr_window = tk.Toplevel(self.root)
            qr_window.title("QR-–∫–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
            qr_window.geometry("400x500")
            qr_window.configure(bg="#1e1e1e")
            qr_window.resizable(False, False)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = tk.Label(
                qr_window, 
                text="üì± QR-–∫–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                font=("Arial", 16, "bold"),
                bg="#1e1e1e",
                fg="#ffffff"
            )
            title_label.pack(pady=20)
            
            # URL
            url_label = tk.Label(
                qr_window,
                text=f"URL: {url}",
                font=("Arial", 10),
                bg="#1e1e1e",
                fg="#00ff00",
                wraplength=350
            )
            url_label.pack(pady=10)
            
            # –§—Ä–µ–π–º –¥–ª—è QR-–∫–æ–¥–∞
            qr_frame = tk.Frame(qr_window, bg="#1e1e1e")
            qr_frame.pack(pady=20)
            
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            self.generate_qr_in_window(qr_frame, url)
            
            # –ö–Ω–æ–ø–∫–∏
            button_frame = tk.Frame(qr_window, bg="#1e1e1e")
            button_frame.pack(pady=20)
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            open_btn = tk.Button(
                button_frame,
                text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                command=lambda: webbrowser.open(url),
                bg="#00aa00",
                fg="#ffffff",
                font=("Arial", 12),
                padx=20,
                pady=10
            )
            open_btn.pack(side=tk.LEFT, padx=10)
            
            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è URL
            copy_btn = tk.Button(
                button_frame,
                text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL",
                command=lambda: self.copy_url_to_clipboard(url, qr_window),
                bg="#0066aa",
                fg="#ffffff",
                font=("Arial", 12),
                padx=20,
                pady=10
            )
            copy_btn.pack(side=tk.LEFT, padx=10)
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions = tk.Label(
                qr_window,
                text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∫–∞–º–µ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n2. –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL –≤—Ä—É—á–Ω—É—é\n3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ç–æ–π –∂–µ Wi-Fi —Å–µ—Ç–∏",
                font=("Arial", 10),
                bg="#1e1e1e",
                fg="#cccccc",
                justify=tk.LEFT
            )
            instructions.pack(pady=20)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ QR-–∫–æ–¥–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ QR-–∫–æ–¥–∞: {e}")
    
    def generate_qr_in_window(self, parent_frame, url):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–µ"""
        try:
            if not HAS_QRCODE:
                print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                self._show_qr_fallback(parent_frame, url)
                return
                
            print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è URL: {url}")
            
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=4,
                border=1,
            )
            qr.add_data(url)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = img.resize((120, 120), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = "temp_qr_main.png"
            img.save(temp_file)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            qr_image = ImageTk.PhotoImage(file=temp_file)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º QR-–∫–æ–¥
            qr_label = tk.Label(parent_frame, image=qr_image, bg="#1e1e1e")
            qr_label.image = qr_image  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            qr_label.pack()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_file)
            except:
                pass
            
            print(f"‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞: {e}")
            import traceback
            traceback.print_exc()
            self._show_qr_fallback(parent_frame, url)
    
    def _show_qr_fallback(self, parent_frame, url):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ QR-–∫–æ–¥–∞"""
        text_label = tk.Label(
            parent_frame, 
            text=f"üì± –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\nURL –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é:\n{url}\n\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n2. –í–≤–µ–¥–∏—Ç–µ URL –≤—ã—à–µ\n3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ç–æ–π –∂–µ Wi-Fi —Å–µ—Ç–∏",
            bg="#1e1e1e",
            fg="#00ff00",
            font=("Arial", 11, "bold"),
            justify=tk.CENTER,
            wraplength=350
        )
        text_label.pack()
    
    def copy_url_to_clipboard(self, url, window):
        """–ö–æ–ø–∏—Ä—É–µ—Ç URL –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            window.clipboard_clear()
            window.clipboard_append(url)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n{url}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL: {e}")

    # –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã
    
    # –ú–µ—Ç–æ–¥ start_telegram_bot —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ start_bot_console —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ update_bot_status_indicator —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ show_bot_notification —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ show_bot_info —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ show_bot_setup_guide —É–¥–∞–ª–µ–Ω
    
    def check_tesseract(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Tesseract OCR"""
        try:
            if HAS_TESSERACT:
                # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
                pytesseract.get_tesseract_version()
                logger.info("Tesseract OCR –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                return True
            else:
                logger.warning("Tesseract OCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tesseract: {e}")
            return False
    
    # –ú–µ—Ç–æ–¥ get_stats_for_bot —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ get_items_for_bot —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ get_items_from_file_for_bot —É–¥–∞–ª–µ–Ω
    
    # –ú–µ—Ç–æ–¥ calculate_deal_profit_for_bot —É–¥–∞–ª–µ–Ω
    
    def sync_with_mobile_interface(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –º–æ–±–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        try:
            logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –º–æ–±–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º...")
            
            if not self.mobile_interface_enabled:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            if hasattr(self, 'mobile_interface') and self.mobile_interface:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
                self.mobile_interface.update_items_data()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.mobile_interface.update_stats_data()
                
                logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                messagebox.showinfo("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –º–æ–±–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º!")
            else:
                logger.warning("‚ö†Ô∏è –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n{str(e)}")
    
    def clean_phantom_deals(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫...")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏
            initial_count = len(self.history)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (–ø—É—Å—Ç—ã–µ –∏–ª–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
            cleaned_history = []
            for record in self.history:
                if len(record) >= 4 and record[0] and record[1] and record[2] and record[3]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                    if str(record[0]).strip() and str(record[1]).strip() and str(record[2]).strip() and str(record[3]).strip():
                        cleaned_history.append(record)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.history = cleaned_history
            removed_count = initial_count - len(self.history)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.save_deals()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.update_history_display()
            self.update_total_profit()
            
            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {removed_count} —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {removed_count}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {len(self.history)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:\n{str(e)}")


def _start_winapi_hotkeys_for_app(app):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏ —á–µ—Ä–µ–∑ WinAPI –¥–ª—è F8 –∏ \\ (—Ñ–æ–ª–±—ç–∫, –µ—Å–ª–∏ keyboard –Ω–µ –ª–æ–≤–∏—Ç –≤–Ω–µ —Ñ–æ–∫—É—Å–∞)."""
    try:
        import ctypes
        import ctypes.wintypes as wt
        user32 = ctypes.windll.user32
        MOD_NOREPEAT = 0x4000
        HOTKEY_ID_F8 = 1
        HOTKEY_ID_BS = 2

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º F8
        if not user32.RegisterHotKey(None, HOTKEY_ID_F8, MOD_NOREPEAT, 0x77):  # VK_F8
            return False

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º backslash (–∏–ª–∏ F9 –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ)
        if not user32.RegisterHotKey(None, HOTKEY_ID_BS, MOD_NOREPEAT, 0xDC):  # VK_OEM_5
            user32.RegisterHotKey(None, HOTKEY_ID_BS, MOD_NOREPEAT, 0x78)      # VK_F9

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø–∏—Å–∫–∏
        app._winapi_user32 = user32
        app._winapi_hotkey_ids = (HOTKEY_ID_F8, HOTKEY_ID_BS)

        def loop():
            msg = wt.MSG()
            while getattr(app, 'running', True):
                res = user32.GetMessageW(ctypes.byref(msg), None, 0, 0)
                if res == 0 or res == -1:
                    break
                if msg.message == 0x0312:  # WM_HOTKEY
                    if msg.wParam == HOTKEY_ID_F8:
                        app.root.after(0, app._safe_toggle_overlay)
                    elif msg.wParam == HOTKEY_ID_BS:
                        app.root.after(0, app._safe_toggle_page_refresh)
                user32.TranslateMessage(ctypes.byref(msg))
                user32.DispatchMessageW(ctypes.byref(msg))

        t = threading.Thread(target=loop, daemon=True, name="WinHotkeysThread")
        t.start()
        return True
    except Exception:
        logger.exception("WinAPI —Ö–æ—Ç–∫–µ–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å (—Ñ–æ–ª–±—ç–∫)")
        return False


def _stop_winapi_hotkeys_for_app(app):
    try:
        if hasattr(app, '_winapi_user32') and hasattr(app, '_winapi_hotkey_ids'):
            user32 = app._winapi_user32
            f8_id, bs_id = app._winapi_hotkey_ids
            try:
                user32.UnregisterHotKey(None, f8_id)
            except Exception:
                pass
            try:
                user32.UnregisterHotKey(None, bs_id)
            except Exception:
                pass
    except Exception:
        pass


if __name__ == "__main__":
    root = tk.Tk()
    app = TraderApp(root)
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ WinAPI —Ö–æ—Ç–∫–µ–∏ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫
    _start_winapi_hotkeys_for_app(app)

    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º on_close, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–Ω—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö–æ—Ç–∫–µ–µ–≤
    try:
        _orig_on_close = app.on_close
        def _wrapped_on_close():
            try:
                _stop_winapi_hotkeys_for_app(app)
            finally:
                _orig_on_close()
        app.on_close = _wrapped_on_close
        root.protocol("WM_DELETE_WINDOW", app.on_close)
    except Exception:
        pass

    root.mainloop()