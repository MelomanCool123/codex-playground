#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ –∏–∑ 5VITO
"""

import sys
import os
import re
from PIL import Image
import pytesseract

def test_regex_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    print("=== –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (–∏–º–∏—Ç–∞—Ü–∏—è OCR)
    test_cases = [
        "–°–ª–∞–±–æ–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ $ 52 700 (–∫—É–ø–ª–µ–Ω–æ 34 —à—Ç.)",
        "–°–∏–ª—å–Ω–æ–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ $ 89 500 (–ø—Ä–æ–¥–∞–Ω–æ 12 —à—Ç.)",
        "–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫ $ 125 000 (–∫—É–ø–ª–µ–Ω–æ 5 —à—Ç.)",
        "–ë–∏–Ω—Ç $ 15 300 (–ø—Ä–æ–¥–∞–Ω–æ 50 —à—Ç.)",
        "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç $ 1000",
        "–¢–æ–≤–∞—Ä –±–µ–∑ —Ü–µ–Ω—ã (–∫—É–ø–ª–µ–Ω–æ 10 —à—Ç.)"
    ]
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    pattern = r'([–ê-–Ø–∞-—è–Å—ë\s\-\.]+)\s+\$\s*([\d\s,]+)\s*\(([–∫—É–ø–ª–µ–Ω–æ|–ø—Ä–æ–¥–∞–Ω–æ]+)\s+(\d+)\s+—à—Ç\.\)'
    
    print(f"–ü–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
    print()
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"–¢–µ—Å—Ç {i}: {test_case}")
        
        match = re.search(pattern, test_case)
        if match:
            name = match.group(1).strip()
            price = match.group(2).replace(' ', '').replace(',', '')
            deal_type = match.group(3)
            quantity = int(match.group(4))
            
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ:")
            print(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: '{name}'")
            print(f"     –¶–µ–Ω–∞: {price}")
            print(f"     –¢–∏–ø: {deal_type}")
            print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å")
        
        print()

def test_bbox_calculation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    print("=== –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ===")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–∫–Ω–æ
    class MockWindow:
        def __init__(self, left, top, right, bottom):
            self.left = left
            self.top = top
            self.right = right
            self.bottom = bottom
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
    test_windows = [
        MockWindow(100, 100, 900, 700),   # –û–±—ã—á–Ω–æ–µ –æ–∫–Ω–æ
        MockWindow(0, 0, 1920, 1080),     # –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–µ
        MockWindow(200, 150, 800, 600),   # –ú–∞–ª–µ–Ω—å–∫–æ–µ –æ–∫–Ω–æ
    ]
    
    for i, window in enumerate(test_windows, 1):
        print(f"–¢–µ—Å—Ç {i}: –û–∫–Ω–æ {window.left},{window.top} - {window.right},{window.bottom}")
        
        # –†–∞—Å—á–µ—Ç –æ–±–ª–∞—Å—Ç–∏ (–∫–∞–∫ –≤ –∫–æ–¥–µ)
        left = window.left + 300
        top = window.top + 150
        right = window.right - 50
        bottom = window.bottom - 100
        
        print(f"  –û–±–ª–∞—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {left},{top} - {right},{bottom}")
        print(f"  –†–∞–∑–º–µ—Ä: {right-left} x {bottom-top}")
        print()

def test_import_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    print("=== –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ ===")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    processed_transactions = set()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    test_transactions = [
        {'name': '–¢–æ–≤–∞—Ä 1', 'price': 1000, 'type': 'buy', 'quantity': 5},
        {'name': '–¢–æ–≤–∞—Ä 2', 'price': 2000, 'type': 'sell', 'quantity': 3},
        {'name': '–¢–æ–≤–∞—Ä 1', 'price': 1000, 'type': 'buy', 'quantity': 5},  # –î—É–±–ª–∏–∫–∞—Ç
        {'name': '–¢–æ–≤–∞—Ä 3', 'price': 3000, 'type': 'buy', 'quantity': 1},
    ]
    
    print("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
    
    for i, trans in enumerate(test_transactions, 1):
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        trans_key = (trans['name'], trans['price'], trans['type'], trans['quantity'])
        
        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {i}: {trans['name']} - ${trans['price']} ({trans['type']})")
        
        if trans_key not in processed_transactions:
            processed_transactions.add(trans_key)
            print(f"  ‚úÖ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º")
        else:
            print(f"  ‚ùå –î—É–±–ª–∏–∫–∞—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    print(f"\n–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(processed_transactions)}")

def test_ocr_simulation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é OCR"""
    print("=== –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ OCR ===")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ OCR
    mock_ocr_data = {
        'text': [
            '–°–ª–∞–±–æ–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ',
            '$ 52 700',
            '(–∫—É–ø–ª–µ–Ω–æ 34 —à—Ç.)',
            '–°–∏–ª—å–Ω–æ–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ',
            '$ 89 500',
            '(–ø—Ä–æ–¥–∞–Ω–æ 12 —à—Ç.)'
        ],
        'conf': [90, 95, 88, 92, 96, 87]  # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    }
    
    print("–ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ OCR:")
    for i, (text, conf) in enumerate(zip(mock_ocr_data['text'], mock_ocr_data['conf'])):
        print(f"  {i+1}. '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf}%)")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    full_text = " ".join(mock_ocr_data['text'])
    print(f"\n–°–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {full_text}")
    
    # –ü–∞—Ä—Å–∏–º
    pattern = r'([–ê-–Ø–∞-—è–Å—ë\s\-\.]+)\s+\$\s*([\d\s,]+)\s*\(([–∫—É–ø–ª–µ–Ω–æ|–ø—Ä–æ–¥–∞–Ω–æ]+)\s+(\d+)\s+—à—Ç\.\)'
    matches = re.findall(pattern, full_text)
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(matches)}")
    for i, match in enumerate(matches, 1):
        print(f"  {i}. {match[0]} - ${match[1]} ({match[2]} {match[3]} —à—Ç.)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ –∏–∑ 5VITO")
    print("=" * 50)
    
    try:
        test_regex_parsing()
        test_bbox_calculation()
        test_import_logic()
        test_ocr_simulation()
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüéØ –§—É–Ω–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
