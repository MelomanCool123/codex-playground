#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    try:
        import gta5_rp_calculator17
        print("‚úÖ –ú–æ–¥—É–ª—å gta5_rp_calculator17 —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_class_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ TraderApp"""
    try:
        import gta5_rp_calculator17
        import tkinter as tk
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ
        root = tk.Tk()
        root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = gta5_rp_calculator17.TraderApp(root)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        assert hasattr(app, 'toggle_page_refresh'), "–ú–µ—Ç–æ–¥ toggle_page_refresh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(app, '_page_refresh_loop'), "–ú–µ—Ç–æ–¥ _page_refresh_loop –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(app, '_refresh_page'), "–ú–µ—Ç–æ–¥ _refresh_page –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(app, 'page_refresh_enabled'), "–ê—Ç—Ä–∏–±—É—Ç page_refresh_enabled –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(app, 'page_refresh_thread'), "–ê—Ç—Ä–∏–±—É—Ç page_refresh_thread –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        assert app.page_refresh_enabled == False, "page_refresh_enabled –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        print("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app.on_close()
        root.destroy()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False

def test_refresh_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        import gta5_rp_calculator17
        import tkinter as tk
        
        root = tk.Tk()
        root.withdraw()
        app = gta5_rp_calculator17.TraderApp(root)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ _refresh_page (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
        if hasattr(app, '_refresh_page'):
            print("‚úÖ –ú–µ—Ç–æ–¥ _refresh_page –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        initial_state = app.page_refresh_enabled
        app.toggle_page_refresh()
        new_state = app.page_refresh_enabled
        assert new_state != initial_state, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è"
        print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        app.toggle_page_refresh()
        assert app.page_refresh_enabled == initial_state, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É"
        print("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        app.on_close()
        root.destroy()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è", test_import),
        ("–ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞", test_class_methods),
        ("–ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", test_refresh_methods),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
