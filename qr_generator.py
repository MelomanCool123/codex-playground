#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ GTA5 RP Calculator
"""

import qrcode
import socket
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import webbrowser
import os

class QRCodeGenerator:
    def __init__(self, url=None):
        self.root = tk.Tk()
        self.root.title("QR-–∫–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        self.root.geometry("400x500")
        self.root.configure(bg="#1e1e1e")
        
        self.qr_image = None
        self.url = url if url else self.get_local_ip()
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞)
        self.image_refs = []
        
        self.setup_gui()
        self.generate_qr()
        
    def get_local_ip(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É –∞–¥—Ä–µ—Å—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            return f"http://{local_ip}:5000"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {e}")
            return "http://localhost:5000"
    
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GUI"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            self.root, 
            text="üì± QR-–∫–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            font=("Arial", 16, "bold"),
            bg="#1e1e1e",
            fg="#ffffff"
        )
        title_label.pack(pady=20)
        
        # URL
        url_label = tk.Label(
            self.root,
            text=f"URL: {self.url}",
            font=("Arial", 10),
            bg="#1e1e1e",
            fg="#00ff00",
            wraplength=350
        )
        url_label.pack(pady=10)
        
        # QR-–∫–æ–¥
        self.qr_frame = tk.Frame(self.root, bg="#1e1e1e")
        self.qr_frame.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.root, bg="#1e1e1e")
        button_frame.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = tk.Button(
            button_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å QR-–∫–æ–¥",
            command=self.generate_qr,
            bg="#0066cc",
            fg="#ffffff",
            font=("Arial", 12),
            padx=20,
            pady=10
        )
        refresh_btn.pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        open_btn = tk.Button(
            button_frame,
            text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
            command=self.open_in_browser,
            bg="#00aa00",
            fg="#ffffff",
            font=("Arial", 12),
            padx=20,
            pady=10
        )
        open_btn.pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = tk.Button(
            button_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å QR-–∫–æ–¥",
            command=self.save_qr,
            bg="#aa6600",
            fg="#ffffff",
            font=("Arial", 12),
            padx=20,
            pady=10
        )
        save_btn.pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è URL
        copy_btn = tk.Button(
            button_frame,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL",
            command=self.copy_url,
            bg="#0066aa",
            fg="#ffffff",
            font=("Arial", 12),
            padx=20,
            pady=10
        )
        copy_btn.pack(side=tk.LEFT, padx=10)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions = tk.Label(
            self.root,
            text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∫–∞–º–µ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n2. –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL –≤—Ä—É—á–Ω—É—é\n3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ç–æ–π –∂–µ Wi-Fi —Å–µ—Ç–∏",
            font=("Arial", 10),
            bg="#1e1e1e",
            fg="#cccccc",
            justify=tk.LEFT
        )
        instructions.pack(pady=20)
        
    def generate_qr(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥"""
        try:
            print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è URL: {self.url}")
            
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=4,
                border=1,
            )
            qr.add_data(self.url)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = img.resize((120, 120), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = "temp_qr.png"
            img.save(temp_file)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            self.root.after(0, lambda: self._load_qr_from_file(temp_file))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞: {e}")
            import traceback
            traceback.print_exc()
            self._show_text_fallback()
    
    def _load_qr_from_file(self, temp_file):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç QR-–∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
            self.qr_image = ImageTk.PhotoImage(file=temp_file)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
            self.image_refs.append(self.qr_image)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º QR-–∫–æ–¥
            if hasattr(self, 'qr_label'):
                self.qr_label.destroy()
                
            self.qr_label = tk.Label(self.qr_frame, image=self.qr_image, bg="#1e1e1e")
            self.qr_label.image = self.qr_image  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.qr_label.pack()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_file)
            except:
                pass
            
            print(f"‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞: {e}")
            import traceback
            traceback.print_exc()
            self._show_text_fallback()
    
    def _show_text_fallback(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ QR-–∫–æ–¥–∞"""
        if hasattr(self, 'qr_label'):
            self.qr_label.destroy()
        self.qr_label = tk.Label(
            self.qr_frame, 
            text=f"üì± –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\nURL –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é:\n{self.url}\n\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n2. –í–≤–µ–¥–∏—Ç–µ URL –≤—ã—à–µ\n3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ç–æ–π –∂–µ Wi-Fi —Å–µ—Ç–∏",
            bg="#1e1e1e",
            fg="#00ff00",
            font=("Arial", 11, "bold"),
            justify=tk.CENTER,
            wraplength=350
        )
        self.qr_label.pack()
    
    def open_in_browser(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            webbrowser.open(self.url)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
    
    def save_qr(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç QR-–∫–æ–¥ –≤ —Ñ–∞–π–ª"""
        try:
            from tkinter import filedialog
            
            filename = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[("PNG files", "*.png"), ("All files", "*.*")],
                initialname="mobile_interface_qr.png"
            )
            
            if filename:
                # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å–Ω–æ–≤–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                qr = qrcode.QRCode(
                    version=1,
                    error_correction=qrcode.constants.ERROR_CORRECT_L,
                    box_size=10,
                    border=4,
                )
                qr.add_data(self.url)
                qr.make(fit=True)
                
                img = qr.make_image(fill_color="white", back_color="black")
                img.save(filename)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å QR-–∫–æ–¥: {e}")
    
    def copy_url(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç URL –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            self.root.clipboard_clear()
            self.root.clipboard_append(self.url)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n{self.url}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.mainloop()

if __name__ == "__main__":
    app = QRCodeGenerator()
    app.run()
